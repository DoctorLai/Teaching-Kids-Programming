1
00:00:00,166 --> 00:00:01,066
哎大家好

2
00:00:01,066 --> 00:00:02,999
今天我们讲第9课队列

3
00:00:03,000 --> 00:00:04,600
上一节课 我们讲的是堆栈

4
00:00:04,600 --> 00:00:06,633
堆栈 就是 First In Last Out 对吧

5
00:00:06,633 --> 00:00:08,933
那你肯定会好奇呢 First In First Out 是什么

6
00:00:08,933 --> 00:00:09,766
那就是队列

7
00:00:09,766 --> 00:00:11,600
队列就是说我们去排队的时候

8
00:00:11,600 --> 00:00:13,733
的这个顺序

9
00:00:13,733 --> 00:00:16,033
画一个简单的队列, 我们可以用 list

10
00:00:16,066 --> 00:00:16,866
就是

11
00:00:16,900 --> 00:00:19,066
Python 里面可以用很简单的这个 list

12
00:00:19,166 --> 00:00:21,433
空的 list, q 等于这个

13
00:00:21,433 --> 00:00:22,266
list 对吧

14
00:00:22,266 --> 00:00:23,599
我从后面进来一个对吧

15
00:00:23,599 --> 00:00:26,133
q.append(1)

16
00:00:26,133 --> 00:00:27,199
那么它这个

17
00:00:27,299 --> 00:00:28,633
这里面就是1了对吧

18
00:00:28,699 --> 00:00:29,966
然后 q 点 pop

19
00:00:29,966 --> 00:00:32,266
pop 是不加参数的话它是从右边取

20
00:00:32,266 --> 00:00:33,766
那就是 First In Last Out

21
00:00:33,766 --> 00:00:36,100
但是如果 pop(0) 的话是从 index

22
00:00:36,266 --> 00:00:38,000
最左边第一个里面 pop 出来

23
00:00:38,000 --> 00:00:38,733
那它就是 队列

24
00:00:38,733 --> 00:00:40,100
它就出队的就是这样的

25
00:00:41,266 --> 00:00:43,600
入队列它是一个 enque

26
00:00:43,800 --> 00:00:46,266
入队列的英文叫 enque

27
00:00:46,266 --> 00:00:48,200
出队列它是一个 deque

28
00:00:48,200 --> 00:00:49,833
我们称为 deque 这个操作

29
00:00:49,833 --> 00:00:50,800
一般是这样子的

30
00:00:51,400 --> 00:00:54,533
First In First Out - FIFO

31
00:00:54,866 --> 00:00:57,366
最简单的方法就是 q = empty list

32
00:00:57,633 --> 00:00:59,099
然后 q.append

33
00:00:59,733 --> 00:01:01,166
append 1 对吧

34
00:01:01,333 --> 00:01:02,499
那它就是变成

35
00:01:03,066 --> 00:01:04,599
q.append(1) 然后 这时候是什么

36
00:01:04,599 --> 00:01:07,166
q 就是打印出来 q.append 2

37
00:01:07,633 --> 00:01:08,899
再 print q

38
00:01:09,533 --> 00:01:10,899
q.append(3)

39
00:01:11,533 --> 00:01:12,166
再 print q

40
00:01:12,166 --> 00:01:13,866
我们看一下它会出现什么

41
00:01:14,200 --> 00:01:15,500
123是吧

42
00:01:15,500 --> 00:01:17,266
很明显从右边取 对吧

43
00:01:17,266 --> 00:01:18,166
那我们看一下

44
00:01:18,266 --> 00:01:19,033
从左边

45
00:01:19,233 --> 00:01:21,800
出队列应该是123是吧

46
00:01:21,800 --> 00:01:23,800
print(q.pop(0) 是吧

47
00:01:23,800 --> 00:01:24,966
0就是从第一个

48
00:01:25,400 --> 00:01:29,500
123123我们给它这个是取出它的元素

49
00:01:29,533 --> 00:01:31,333
那如果我们如果说要打印

50
00:01:31,333 --> 00:01:32,333
它应该要多少个

51
00:01:32,333 --> 00:01:33,400
那我们就可以这么写

52
00:01:34,100 --> 00:01:36,866
q.pop(0)

53
00:01:36,933 --> 00:01:38,000
然后 print(q)

54
00:01:39,633 --> 00:01:40,666
弄3次

55
00:01:42,000 --> 00:01:43,900
对吧 取出元素 再取出

56
00:01:43,900 --> 00:01:44,733
它会为空

57
00:01:44,766 --> 00:01:46,633
我如果这时候再 pop 一次呢

58
00:01:47,233 --> 00:01:47,866
它会出现什么

59
00:01:47,866 --> 00:01:49,833
它会报错吧 它肯定会报错是吧

60
00:01:50,833 --> 00:01:52,533
是 pop from empty list

61
00:01:52,533 --> 00:01:55,266
一般我们很少用 list 来表示

62
00:01:55,633 --> 00:01:59,433
队列  因为它有个问题就是 q.pop(0) 的时候

63
00:01:59,433 --> 00:02:01,300
这个操作是非常费时的

64
00:02:01,300 --> 00:02:02,866
它并不是最优的一种方法

65
00:02:03,033 --> 00:02:04,733
比如说我可以简单理解

66
00:02:04,733 --> 00:02:06,133
比如说1这边有

67
00:02:06,900 --> 00:02:08,000
有10,000个元素

68
00:02:08,400 --> 00:02:09,833
对吧 那我把这个取出来

69
00:02:09,833 --> 00:02:11,800
它数组是需要调整的

70
00:02:11,800 --> 00:02:12,600
怎么个调整呢

71
00:02:12,600 --> 00:02:13,833
可能就是把后面的

72
00:02:14,100 --> 00:02:15,500
几个元素往前挪一位

73
00:02:15,500 --> 00:02:17,800
那么它就要进行999次

74
00:02:18,400 --> 00:02:20,500
如果是1,000个的元素的话

75
00:02:20,500 --> 00:02:24,533
那么它需要挪动后面999个元素

76
00:02:24,600 --> 00:02:26,633
这东西是非常非常耗时的

77
00:02:26,866 --> 00:02:29,533
那我们Python里面它实际上呢

78
00:02:29,533 --> 00:02:30,533
有一个叫 deque

79
00:02:30,533 --> 00:02:31,700
deque 就是 from

80
00:02:31,900 --> 00:02:33,633
你要先从这个包里面 from

81
00:02:34,066 --> 00:02:36,033
collections import deque

82
00:02:36,033 --> 00:02:37,933
deque 我们可以 deque 是什么呢

83
00:02:37,933 --> 00:02:39,366
double ended queue

84
00:02:39,700 --> 00:02:40,500
它不是

85
00:02:41,000 --> 00:02:43,200
刚才跟我刚才我说的这个 deque 

86
00:02:43,200 --> 00:02:44,333
和 enque 是吧

87
00:02:44,333 --> 00:02:47,166
deque 操作 enque 这个前缀

88
00:02:47,166 --> 00:02:50,366
enque 就是进 deque 就是出 

89
00:02:50,866 --> 00:02:52,066
前缀吗

90
00:02:52,200 --> 00:02:53,966
英语里面 前缀 en 是什么

91
00:02:53,966 --> 00:02:57,133
进 de 是什么 拿出来的意思的 deque 的前缀

92
00:02:57,266 --> 00:02:59,366
但这个 de 不是那个意思

93
00:02:59,366 --> 00:03:00,200
是 double ended

94
00:03:00,566 --> 00:03:03,133
它就是双头队列 什么叫双头队列

95
00:03:03,366 --> 00:03:04,566
双头队列就是你两边

96
00:03:04,566 --> 00:03:05,733
你也可以从左边进

97
00:03:05,866 --> 00:03:08,766
左边进 你也可以从右边出来对吧

98
00:03:08,766 --> 00:03:10,000
这就是结合了

99
00:03:10,100 --> 00:03:12,833
你可以简单的理解为结合了那个

100
00:03:12,900 --> 00:03:14,266
堆栈和队列对吧

101
00:03:14,266 --> 00:03:15,966
两个结合起来左边进就是

102
00:03:15,966 --> 00:03:16,666
append left

103
00:03:16,833 --> 00:03:19,533
左边出 pop left 右边进

104
00:03:19,700 --> 00:03:21,100
append 右边出

105
00:03:21,266 --> 00:03:22,333
pop 

106
00:03:22,333 --> 00:03:23,233
就是左边的话

107
00:03:23,233 --> 00:03:25,400
你要加上那个词 需要加上一个 left

108
00:03:25,700 --> 00:03:26,833
默认呢就是 right

109
00:03:27,966 --> 00:03:29,033
然后我们看一下

110
00:03:29,033 --> 00:03:30,900
我们可以说 q 等于 deque 对吧

111
00:03:30,900 --> 00:03:33,266
这个是一个空的队列 你也可以给它说

112
00:03:33,700 --> 00:03:35,566
给一个list的就1234对吧

113
00:03:35,566 --> 00:03:37,500
然后我们可以一样的操作 popleft

114
00:03:37,500 --> 00:03:39,300
只不过是 pop left 不是 pop (0) 吗

115
00:03:39,300 --> 00:03:40,100
如果你是用

116
00:03:40,733 --> 00:03:42,833
简单 list 的呢 那就是 pop(0) 对吧

117
00:03:43,200 --> 00:03:44,866
pop left 就是语法上有点不一样

118
00:03:44,866 --> 00:03:46,733
pop left 然后 q 点 append

119
00:03:46,733 --> 00:03:49,666
pop 就是右边出来 然后 q 点 append

120
00:03:50,133 --> 00:03:52,166
left 就是左边进对吧这两个是

121
00:03:52,800 --> 00:03:56,200
另外一个用了这个 double ended queue 带来的这个方法

122
00:03:56,400 --> 00:03:57,166
这个 popleft

123
00:03:57,233 --> 00:03:58,033
它就是

124
00:03:58,033 --> 00:03:59,966
非常快了 它就不需要去挪了

125
00:03:59,966 --> 00:04:00,666
所以它非常快

126
00:04:00,666 --> 00:04:02,266
一般用队列就用这个 deque

127
00:04:02,633 --> 00:04:03,566
然后我们现在来

128
00:04:04,000 --> 00:04:06,600
写一个函数就是比如说我有个数组

129
00:04:06,400 --> 00:04:07,200
arr

130
00:04:07,500 --> 00:04:10,700
然后我们需要把数组里面的所有

131
00:04:11,166 --> 00:04:15,100
数字都平方 比如说它原来是

132
00:04:15,233 --> 00:04:16,100
123

133
00:04:16,100 --> 00:04:18,833
那我们就要返回这个 Input 就是这个

134
00:04:18,833 --> 00:04:20,366
那 Output 就要返回

135
00:04:20,566 --> 00:04:24,100
149对吧 那我们可以比如说返回

136
00:04:24,100 --> 00:04:26,766
先返回到这个 Answer 这个空的列表里面

137
00:04:27,100 --> 00:04:30,666
然后我可以先 q 等于 对吧 刚才这个 arr

138
00:04:30,766 --> 00:04:33,033
把 arr 转成这个双头队列

139
00:04:33,833 --> 00:04:36,866
然后当还有元素的话我取出来吧

140
00:04:36,866 --> 00:04:39,900
按住所以当现在的元素就是 q.pop

141
00:04:39,933 --> 00:04:40,733
pop 什么

142
00:04:42,633 --> 00:04:44,766
从左边取 pop what

143
00:04:45,100 --> 00:04:48,400
popleft 因为它是用 deque 哦对吧

144
00:04:48,566 --> 00:04:50,800
然后我就 answer.append

145
00:04:51,166 --> 00:04:52,400
n 乘以 n 是吧

146
00:04:52,400 --> 00:04:55,233
对 或者是 n**2 这个也可以 或者是 pow(n, 2)

147
00:04:55,700 --> 00:04:58,033
pow(n, 2) 这个也可以 是吧 这三种方法都可以

148
00:04:58,733 --> 00:05:00,733
然后我这边返回

149
00:05:01,100 --> 00:05:03,633
answer对吧 那我们试验一下 print

150
00:05:03,900 --> 00:05:06,433
print(sqrNumbers([1,2,3,4,5])) 好吧

151
00:05:06,900 --> 00:05:08,600
这里错了 这个要加上这个

152
00:05:08,900 --> 00:05:10,533
[1,4,9,16,25] 没错哎

153
00:05:10,533 --> 00:05:11,466
那我现在问你一个问题

154
00:05:11,466 --> 00:05:13,566
如果我要改成[25, 16, 9, 4, 1]

155
00:05:13,700 --> 00:05:14,366
反过来

156
00:05:14,366 --> 00:05:16,666
你觉得应该最简单的方法是什么

157
00:05:17,300 --> 00:05:18,333
就是上节课

158
00:05:18,933 --> 00:05:20,300
对对 那我就比如说这个函数

159
00:05:20,300 --> 00:05:21,566
我需要怎么改才能够

160
00:05:21,966 --> 00:05:22,966
让它反过来喽

161
00:05:24,566 --> 00:05:25,166
不记得了

162
00:05:25,166 --> 00:05:28,066
是不是在13行这pop left那是左边取

163
00:05:28,400 --> 00:05:29,266
去掉是吧

164
00:05:29,266 --> 00:05:31,333
把那去掉 因为我每次我现在取右边吗

165
00:05:31,333 --> 00:05:32,133
是吧

166
00:05:32,400 --> 00:05:33,200
对

167
00:05:33,933 --> 00:05:34,633
或者你可以这么写

168
00:05:34,633 --> 00:05:36,133
这 answer 不是那个吗 对吧

169
00:05:36,133 --> 00:05:38,266
answer 我也可以让它弄成一个 deque

170
00:05:38,266 --> 00:05:39,400
我是不是可以往左边

171
00:05:39,400 --> 00:05:40,666
对吧这也行吗

172
00:05:40,666 --> 00:05:41,800
但是它是一个 deque 嘛

173
00:05:41,800 --> 00:05:44,033
deque 然后你再把它转成一个 list

174
00:05:44,100 --> 00:05:44,966
这也是可以

175
00:05:45,366 --> 00:05:46,166
对对对 很麻烦

176
00:05:46,166 --> 00:05:48,766
我就是有点脱裤子放屁那种意思

177
00:05:48,766 --> 00:05:50,633
但是就是为了给你演示一下

178
00:05:50,866 --> 00:05:52,100
这几个函数

179
00:05:52,100 --> 00:05:54,566
这几种方法对吧 你要 append left 就往左

180
00:05:54,866 --> 00:05:56,900
然后这里面它是一个 deque object

181
00:05:56,900 --> 00:05:58,233
你要把它转成这个

182
00:05:58,233 --> 00:06:00,666
list的转换也是有代价的 对吧

183
00:06:00,666 --> 00:06:01,400
对

184
00:06:01,400 --> 00:06:04,200
对 然后就是 lens, lens 就是它的那个

185
00:06:04,233 --> 00:06:06,833
多少个 对吧 比如说我们可以 print 

186
00:06:07,166 --> 00:06:08,933
lens 这个就是其实就跟那个

187
00:06:09,233 --> 00:06:10,000
列表一样吧

188
00:06:10,000 --> 00:06:10,733
你就有多少个

189
00:06:10,733 --> 00:06:12,600
还是在里多少个元素里面

190
00:06:12,600 --> 00:06:13,733
四个它就是4个

191
00:06:14,300 --> 00:06:15,833
然后我比如说我可以取

192
00:06:16,566 --> 00:06:19,233
取比如说 q 等于123

193
00:06:19,233 --> 00:06:21,066
然后我要取最左边的这个

194
00:06:21,300 --> 00:06:23,600
q[0] 就是最左边的那一个

195
00:06:23,600 --> 00:06:25,300
然后最右边是-1 是吧

196
00:06:25,566 --> 00:06:26,700
或者可以用

197
00:06:27,400 --> 00:06:28,333
~0 这个也可以

198
00:06:28,466 --> 00:06:30,100
这个也是代表从右边的意思

199
00:06:30,266 --> 00:06:31,933
比如我们可以看一下0

200
00:06:31,933 --> 00:06:34,100
或如果是这样的话 它应该是表示

201
00:06:34,566 --> 00:06:36,133
032

202
00:06:36,266 --> 00:06:38,000
为什么呢

203
00:06:38,000 --> 00:06:40,533
这实际上是取反的意思

204
00:06:40,533 --> 00:06:41,933
这个在 Python 里面是取反

205
00:06:41,933 --> 00:06:45,666
比如说 x 它是等于取反是等于减 x 减

206
00:06:45,733 --> 00:06:47,933
那你比如说0的时候它是等于-1吗

207
00:06:47,933 --> 00:06:48,966
1的时候是-2

208
00:06:48,966 --> 00:06:51,700
这个比较高深可以不用太理解对吧

209
00:06:51,833 --> 00:06:55,566
然后我们今天就讲到这有什么问题吗

210
00:06:55,666 --> 00:06:59,033
没有好 现在就这样 拜拜 拜拜

