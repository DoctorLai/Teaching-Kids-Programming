1
00:00:00,000 --> 00:00:03,919
hello me saying mr roy how are you good

2
00:00:03,040 --> 00:00:05,759
okay

3
00:00:03,919 --> 00:00:08,000
okay so how many saltine ingredients

4
00:00:05,759 --> 00:00:10,080
have we talked about so far vegetable

5
00:00:08,000 --> 00:00:12,240
insertion salt bubble sauce quick

6
00:00:10,080 --> 00:00:14,480
selection salt

7
00:00:12,240 --> 00:00:17,480
quick salt baba

8
00:00:14,480 --> 00:00:17,480
quick

9
00:00:29,039 --> 00:00:33,600
that's it yeah so which three has this

10
00:00:31,599 --> 00:00:36,160
uh

11
00:00:33,600 --> 00:00:39,440
average o and

12
00:00:36,160 --> 00:00:42,440
square com complexity controller

13
00:00:39,440 --> 00:00:42,440
um

14
00:00:44,079 --> 00:00:48,160
this one this one is oh and logan

15
00:00:45,840 --> 00:00:50,399
remember oh yeah wait

16
00:00:48,160 --> 00:00:52,079
wait this bubble

17
00:00:50,399 --> 00:00:54,160
yeah yeah yeah this three and this is

18
00:00:52,079 --> 00:00:56,719
the oven again okay

19
00:00:54,160 --> 00:00:59,440
and for the quick saw the worst case is

20
00:00:56,719 --> 00:01:02,719
on square okay and in the best case it's

21
00:00:59,440 --> 00:01:04,479
the bubble saltine with om yeah

22
00:01:02,719 --> 00:01:06,880
and also the

23
00:01:04,479 --> 00:01:09,680
insertion saw this is oven

24
00:01:06,880 --> 00:01:11,920
and the average this is our n square

25
00:01:09,680 --> 00:01:13,600
but for the selection yeah for the

26
00:01:11,920 --> 00:01:16,159
selection song

27
00:01:13,600 --> 00:01:17,840
the number of swaps is no more than n

28
00:01:16,159 --> 00:01:19,360
right yeah

29
00:01:17,840 --> 00:01:20,720
okay

30
00:01:19,360 --> 00:01:22,880
so

31
00:01:20,720 --> 00:01:24,560
um so today we are going to talk about

32
00:01:22,880 --> 00:01:26,960
another sorting diagram which is not

33
00:01:24,560 --> 00:01:29,280
like channel this is generous

34
00:01:26,960 --> 00:01:31,680
means that we can sort anything right

35
00:01:29,280 --> 00:01:34,079
it's just giving me the numbers the

36
00:01:31,680 --> 00:01:36,400
elements the strings whatever because

37
00:01:34,079 --> 00:01:39,680
these resorting agreements are based on

38
00:01:36,400 --> 00:01:41,520
comparison right yeah what's comparison

39
00:01:39,680 --> 00:01:44,000
you compare all right follow for example

40
00:01:41,520 --> 00:01:45,360
bubble sorting we want to compare

41
00:01:44,000 --> 00:01:48,000
the current

42
00:01:45,360 --> 00:01:50,320
number to our element to the next one

43
00:01:48,000 --> 00:01:52,079
and then we want to swap it if the

44
00:01:50,320 --> 00:01:54,079
current number is bigger than the not

45
00:01:52,079 --> 00:01:56,799
letter so that's comparison yeah we have

46
00:01:54,079 --> 00:01:58,399
this comparison quick saw yeah you know

47
00:01:56,799 --> 00:02:00,399
you need to find out the numbers which

48
00:01:58,399 --> 00:02:01,840
is smaller than the pivot bigger than

49
00:02:00,399 --> 00:02:04,079
the pivot that's that's kind of

50
00:02:01,840 --> 00:02:06,880
comparison in search and sort yeah you

51
00:02:04,079 --> 00:02:09,039
want to insert the current element

52
00:02:06,880 --> 00:02:10,560
to a place where it belongs to so you

53
00:02:09,039 --> 00:02:13,360
need to compare the numbers along the

54
00:02:10,560 --> 00:02:15,120
way yeah backwards selection thought you

55
00:02:13,360 --> 00:02:16,080
select the number

56
00:02:15,120 --> 00:02:18,720
which is

57
00:02:16,080 --> 00:02:20,879
slightly smallest number right in the

58
00:02:18,720 --> 00:02:23,280
unsorted area and then you swap it to

59
00:02:20,879 --> 00:02:24,720
the front right let's selections off

60
00:02:23,280 --> 00:02:26,720
emergency thought

61
00:02:24,720 --> 00:02:28,640
yeah we want to compare we want to

62
00:02:26,720 --> 00:02:30,800
divide the

63
00:02:28,640 --> 00:02:33,040
array into two and then we

64
00:02:30,800 --> 00:02:35,040
sort both parts and then

65
00:02:33,040 --> 00:02:39,200
we can merge it yeah we know how to

66
00:02:35,040 --> 00:02:40,560
merge two sorted array right yeah

67
00:02:39,200 --> 00:02:43,040
okay so

68
00:02:40,560 --> 00:02:45,519
selection thought um

69
00:02:43,040 --> 00:02:46,720
so any questions so far

70
00:02:45,519 --> 00:02:47,599
any questions no

71
00:02:46,720 --> 00:02:49,040
okay

72
00:02:47,599 --> 00:02:51,120
okay so what's the difference between

73
00:02:49,040 --> 00:02:52,480
insertion size sections these two are

74
00:02:51,120 --> 00:02:54,560
sometimes quite

75
00:02:52,480 --> 00:02:56,319
confusing to each other right it's not

76
00:02:54,560 --> 00:02:57,200
easy to remember right

77
00:02:56,319 --> 00:02:59,519
yeah

78
00:02:57,200 --> 00:03:01,680
okay so i i try to explain one more time

79
00:02:59,519 --> 00:03:04,480
okay insertions of let's say

80
00:03:01,680 --> 00:03:06,879
five four three two one so we are here

81
00:03:04,480 --> 00:03:09,120
we want to insert these to the front so

82
00:03:06,879 --> 00:03:11,920
let's become four five three two one and

83
00:03:09,120 --> 00:03:13,519
selection thought is that i want to find

84
00:03:11,920 --> 00:03:15,920
the minimum

85
00:03:13,519 --> 00:03:18,000
which is one and i swap it with the five

86
00:03:15,920 --> 00:03:19,200
so it becomes one four three to five

87
00:03:18,000 --> 00:03:20,720
right

88
00:03:19,200 --> 00:03:21,519
yeah

89
00:03:20,720 --> 00:03:23,200
okay

90
00:03:21,519 --> 00:03:25,120
so

91
00:03:23,200 --> 00:03:27,280
which which one has the best cases or

92
00:03:25,120 --> 00:03:29,920
when i i think i mentioned it but i'm

93
00:03:27,280 --> 00:03:31,310
not quite sure you get it which one has

94
00:03:29,920 --> 00:03:34,499
the

95
00:03:31,310 --> 00:03:34,499
[Music]

96
00:03:35,120 --> 00:03:39,599
why is that because every time

97
00:03:37,599 --> 00:03:41,680
if it's already sauteed one two three

98
00:03:39,599 --> 00:03:43,680
four five every time

99
00:03:41,680 --> 00:03:45,280
you are not swapping there's no sloping

100
00:03:43,680 --> 00:03:48,000
laser in the white loop right it's

101
00:03:45,280 --> 00:03:49,120
always in order remember we we have this

102
00:03:48,000 --> 00:03:51,920
y

103
00:03:49,120 --> 00:03:55,120
uh j bigger than equal and zero okay

104
00:03:51,920 --> 00:03:58,319
let's for i in range

105
00:03:55,120 --> 00:04:01,360
range one to n right and then a key

106
00:03:58,319 --> 00:04:04,560
would be equals the numbers i

107
00:04:01,360 --> 00:04:07,680
and y j j will be equals i minus one

108
00:04:04,560 --> 00:04:09,360
right why j bigger than zero and the key

109
00:04:07,680 --> 00:04:11,599
is smaller than

110
00:04:09,360 --> 00:04:14,879
yeah it's a key smaller than the num

111
00:04:11,599 --> 00:04:18,639
straight and j minus equals one uh

112
00:04:14,879 --> 00:04:20,880
uh nums i love j equals num j plus one

113
00:04:18,639 --> 00:04:22,000
right about number j plus one equals num

114
00:04:20,880 --> 00:04:24,320
j

115
00:04:22,000 --> 00:04:27,919
all right num num j

116
00:04:24,320 --> 00:04:30,639
num j plus one equals num j yes okay so

117
00:04:27,919 --> 00:04:33,120
if it's already in order these while

118
00:04:30,639 --> 00:04:35,840
loop will never get executed okay so

119
00:04:33,120 --> 00:04:37,759
that would be o and in the best cases

120
00:04:35,840 --> 00:04:42,000
okay

121
00:04:37,759 --> 00:04:44,320
okay let's a little bit review

122
00:04:42,000 --> 00:04:46,800
now let's talk about scouting so which

123
00:04:44,320 --> 00:04:49,040
is not general sorting counting so

124
00:04:46,800 --> 00:04:51,759
what's counting what's car

125
00:04:49,040 --> 00:04:53,199
counter counting song yeah yeah we're

126
00:04:51,759 --> 00:04:54,400
going to use the counter today so what's

127
00:04:53,199 --> 00:04:56,560
counting

128
00:04:54,400 --> 00:04:59,840
how do you do how do we count

129
00:04:56,560 --> 00:05:00,800
by just counting okay like it's three

130
00:04:59,840 --> 00:05:03,280
five

131
00:05:00,800 --> 00:05:05,039
two one ten

132
00:05:03,280 --> 00:05:08,000
okay so if i tell you that i have an

133
00:05:05,039 --> 00:05:11,280
array like nothing left has the this

134
00:05:08,000 --> 00:05:13,199
range right look so let's say we have

135
00:05:11,280 --> 00:05:15,199
another two here

136
00:05:13,199 --> 00:05:17,440
one here okay so what's the order after

137
00:05:15,199 --> 00:05:17,440
this

138
00:05:18,160 --> 00:05:21,120
it is

139
00:05:20,000 --> 00:05:23,199
1

140
00:05:21,120 --> 00:05:25,759
1 2 2

141
00:05:23,199 --> 00:05:28,080
five ten yeah yeah but how can we do

142
00:05:25,759 --> 00:05:30,639
this look if we know

143
00:05:28,080 --> 00:05:31,520
what's the minimum of this array one

144
00:05:30,639 --> 00:05:34,000
right

145
00:05:31,520 --> 00:05:34,960
the mean is one what's the maximum

146
00:05:34,000 --> 00:05:36,080
ten

147
00:05:34,960 --> 00:05:38,240
right

148
00:05:36,080 --> 00:05:39,600
right all right okay so easy look this

149
00:05:38,240 --> 00:05:41,520
is the magic

150
00:05:39,600 --> 00:05:44,639
so we have a ten bucket

151
00:05:41,520 --> 00:05:44,639
now we have ten buckets

152
00:05:45,120 --> 00:05:49,280
at the bucket this is for one

153
00:05:47,840 --> 00:05:50,960
this is for two

154
00:05:49,280 --> 00:05:53,840
this is for three

155
00:05:50,960 --> 00:05:53,840
this is for four

156
00:05:54,240 --> 00:05:57,120
okay

157
00:05:55,199 --> 00:06:00,240
five

158
00:05:57,120 --> 00:06:01,840
okay and then i have another six

159
00:06:00,240 --> 00:06:03,280
seven

160
00:06:01,840 --> 00:06:04,240
eight

161
00:06:03,280 --> 00:06:05,440
nine

162
00:06:04,240 --> 00:06:08,319
ten okay

163
00:06:05,440 --> 00:06:09,919
so i have ten buckets

164
00:06:08,319 --> 00:06:11,840
one

165
00:06:09,919 --> 00:06:15,039
we can use the counter actually right

166
00:06:11,840 --> 00:06:17,520
like one how many ones do we have one

167
00:06:15,039 --> 00:06:19,440
two one two so i put two here how many

168
00:06:17,520 --> 00:06:21,520
twos do we have two

169
00:06:19,440 --> 00:06:24,319
how many threes would they have one how

170
00:06:21,520 --> 00:06:25,120
many fours zero number one five

171
00:06:24,319 --> 00:06:27,600
one

172
00:06:25,120 --> 00:06:29,280
six yellow seven zero eight zero nine

173
00:06:27,600 --> 00:06:30,560
zero ten okay

174
00:06:29,280 --> 00:06:31,280
now we know

175
00:06:30,560 --> 00:06:33,120
we

176
00:06:31,280 --> 00:06:35,120
look there's ten buckets and we know how

177
00:06:33,120 --> 00:06:37,759
many times they appear right and then we

178
00:06:35,120 --> 00:06:40,080
can construct the sorted array right

179
00:06:37,759 --> 00:06:41,600
do you see how we're doing it look

180
00:06:40,080 --> 00:06:43,759
we start from one because we know the

181
00:06:41,600 --> 00:06:44,720
minimum is one the maximum is ten wait

182
00:06:43,759 --> 00:06:47,199
look look

183
00:06:44,720 --> 00:06:49,599
so how many ones do we have okay two

184
00:06:47,199 --> 00:06:52,319
okay so how about i put two two here

185
00:06:49,599 --> 00:06:54,560
two one yeah how many twos

186
00:06:52,319 --> 00:06:56,880
two okay look at what i'm doing look

187
00:06:54,560 --> 00:06:58,479
look what i'm doing

188
00:06:56,880 --> 00:06:59,520
how many three

189
00:06:58,479 --> 00:07:01,840
one

190
00:06:59,520 --> 00:07:03,599
how many fours

191
00:07:01,840 --> 00:07:05,120
how many five one

192
00:07:03,599 --> 00:07:07,199
how many six

193
00:07:05,120 --> 00:07:09,440
seven eight nine ten ten

194
00:07:07,199 --> 00:07:11,280
you see salty do you see how how we

195
00:07:09,440 --> 00:07:13,039
doing we count it and then we start from

196
00:07:11,280 --> 00:07:15,120
a minimum to maximum how many and we

197
00:07:13,039 --> 00:07:17,440
just open how many times they appear in

198
00:07:15,120 --> 00:07:19,520
an array right yeah

199
00:07:17,440 --> 00:07:22,080
yeah yeah this is quite interesting

200
00:07:19,520 --> 00:07:24,479
right but the problem of these is that

201
00:07:22,080 --> 00:07:26,560
white you need to start from a minimum

202
00:07:24,479 --> 00:07:30,080
to the maximum and if this could be very

203
00:07:26,560 --> 00:07:33,520
large what happened

204
00:07:30,080 --> 00:07:33,520
this maximum is convenient

205
00:07:35,759 --> 00:07:39,599
i don't know if it's left me man yeah

206
00:07:37,759 --> 00:07:41,759
okay i mean yes

207
00:07:39,599 --> 00:07:45,759
so look we have to start from one and

208
00:07:41,759 --> 00:07:47,599
then count to a minion right you see

209
00:07:45,759 --> 00:07:49,759
doesn't make sense it's a long time

210
00:07:47,599 --> 00:07:52,319
that's taking a long time even

211
00:07:49,759 --> 00:07:54,479
the bucket is empty

212
00:07:52,319 --> 00:07:56,319
right because we starting from mean to

213
00:07:54,479 --> 00:07:58,720
the maximum we count how many times they

214
00:07:56,319 --> 00:08:00,400
appear when we don't know

215
00:07:58,720 --> 00:08:02,400
yeah we don't know they

216
00:08:00,400 --> 00:08:04,000
if they don't appear at all right so we

217
00:08:02,400 --> 00:08:05,039
still have to check right so let's take

218
00:08:04,000 --> 00:08:07,440
some

219
00:08:05,039 --> 00:08:10,639
okay and then in order to count how many

220
00:08:07,440 --> 00:08:12,800
elements how can we do this in python

221
00:08:10,639 --> 00:08:14,800
specifically

222
00:08:12,800 --> 00:08:17,520
the thing you know from collection

223
00:08:14,800 --> 00:08:17,520
import was

224
00:08:17,680 --> 00:08:21,360
phone collection in power

225
00:08:24,840 --> 00:08:31,199
import in power

226
00:08:28,639 --> 00:08:32,719
the one how what kind of data structure

227
00:08:31,199 --> 00:08:34,880
can we use to count the number of

228
00:08:32,719 --> 00:08:37,279
elements appear like in the array or

229
00:08:34,880 --> 00:08:37,279
whatever

230
00:08:37,360 --> 00:08:41,519
yeah notebook hash table and what

231
00:08:39,279 --> 00:08:43,519
specifically for that thing we start

232
00:08:41,519 --> 00:08:46,320
with the c what's that thing called

233
00:08:43,519 --> 00:08:50,000
counter yeah counter

234
00:08:46,320 --> 00:08:51,839
so let's say divide counting saw

235
00:08:50,000 --> 00:08:54,399
counting song and then we're given a

236
00:08:51,839 --> 00:08:55,839
numbers yeah

237
00:08:54,399 --> 00:08:58,080
first of all we want to find out the

238
00:08:55,839 --> 00:09:02,560
minimum so we can say minimum value

239
00:08:58,080 --> 00:09:02,560
equals the mean we can just do this mean

240
00:09:04,480 --> 00:09:09,760
and the maximum value equals max

241
00:09:08,000 --> 00:09:12,160
num right

242
00:09:09,760 --> 00:09:13,920
and then c equals counter look if we do

243
00:09:12,160 --> 00:09:16,240
the counter we count how many elements

244
00:09:13,920 --> 00:09:17,920
the number of times they appear right

245
00:09:16,240 --> 00:09:20,000
okay now we have design so we want to

246
00:09:17,920 --> 00:09:23,200
construct this away yeah this is the

247
00:09:20,000 --> 00:09:25,600
sorted array come on

248
00:09:23,200 --> 00:09:27,120
okay let's say sorted sorted array okay

249
00:09:25,600 --> 00:09:30,880
sorted

250
00:09:27,120 --> 00:09:33,519
array a r equals empty and now we go to

251
00:09:30,880 --> 00:09:35,360
list for i in

252
00:09:33,519 --> 00:09:37,839
range

253
00:09:35,360 --> 00:09:39,839
style is the minimum value up to the

254
00:09:37,839 --> 00:09:42,240
maximum value

255
00:09:39,839 --> 00:09:44,640
do i need to do something here

256
00:09:42,240 --> 00:09:46,080
maximum value

257
00:09:44,640 --> 00:09:48,640
[Music]

258
00:09:46,080 --> 00:09:50,720
the inclusive minimum to maximum what so

259
00:09:48,640 --> 00:09:53,760
what should i do with this one because

260
00:09:50,720 --> 00:09:54,720
it's open it's closed open so i have to

261
00:09:53,760 --> 00:09:56,399
do a

262
00:09:54,720 --> 00:09:59,440
plus one yes

263
00:09:56,399 --> 00:09:59,440
and what's the missing here

264
00:09:59,839 --> 00:10:06,880
look i'm now chicken eye right look then

265
00:10:03,120 --> 00:10:09,760
i need to do one look sorted array

266
00:10:06,880 --> 00:10:11,760
saudi array dot append right not a pen

267
00:10:09,760 --> 00:10:13,600
plus equal all open

268
00:10:11,760 --> 00:10:15,519
and press one

269
00:10:13,600 --> 00:10:19,279
point one

270
00:10:15,519 --> 00:10:21,519
dot okay let's do a dot 10 okay 10

271
00:10:19,279 --> 00:10:23,519
open what

272
00:10:21,519 --> 00:10:25,120
uh actually we're not the opponent we

273
00:10:23,519 --> 00:10:27,200
want to extend there's a function called

274
00:10:25,120 --> 00:10:28,800
extend dot extend

275
00:10:27,200 --> 00:10:31,839
what's the difference between append and

276
00:10:28,800 --> 00:10:33,040
extend and here you okay it's then

277
00:10:31,839 --> 00:10:36,240
all right

278
00:10:33,040 --> 00:10:39,360
i times how many times do they appear

279
00:10:36,240 --> 00:10:40,720
ci times right so look i this is the

280
00:10:39,360 --> 00:10:42,720
number we only check how many times

281
00:10:40,720 --> 00:10:45,040
right and how many times they appear or

282
00:10:42,720 --> 00:10:47,360
we just append it right yeah yeah i

283
00:10:45,040 --> 00:10:49,920
learned return

284
00:10:47,360 --> 00:10:53,200
salted alright right that's it

285
00:10:49,920 --> 00:10:53,200
look it's easy look

286
00:10:55,600 --> 00:11:00,399
first of all first we get a minimum of

287
00:10:57,440 --> 00:11:01,920
these numbers maximum numbers counter we

288
00:11:00,399 --> 00:11:03,920
count how many of numbers

289
00:11:01,920 --> 00:11:05,920
for each number sorted array this is the

290
00:11:03,920 --> 00:11:07,680
sorted array we wanted to return and now

291
00:11:05,920 --> 00:11:09,360
we try from the minimum value to the

292
00:11:07,680 --> 00:11:10,720
maximum value increasing because we have

293
00:11:09,360 --> 00:11:12,640
to pass one here

294
00:11:10,720 --> 00:11:15,200
and extend yeah how many times they

295
00:11:12,640 --> 00:11:18,160
appear ci for i element to appear

296
00:11:15,200 --> 00:11:21,440
alright right look

297
00:11:18,160 --> 00:11:24,480
a equals one two three this is a list

298
00:11:21,440 --> 00:11:26,399
a dot append

299
00:11:24,480 --> 00:11:27,760
append four that will become one two

300
00:11:26,399 --> 00:11:30,640
three four right

301
00:11:27,760 --> 00:11:33,279
a dot extend

302
00:11:30,640 --> 00:11:34,399
extend another list like four five six

303
00:11:33,279 --> 00:11:36,720
alright look

304
00:11:34,399 --> 00:11:38,959
look right look

305
00:11:36,720 --> 00:11:41,680
yeah a is one two three and a dot

306
00:11:38,959 --> 00:11:43,680
extends four five six a will become what

307
00:11:41,680 --> 00:11:46,480
22.6

308
00:11:43,680 --> 00:11:48,480
yeah exactly so here it's ten because

309
00:11:46,480 --> 00:11:50,720
this this thing

310
00:11:48,480 --> 00:11:53,440
remember we have two

311
00:11:50,720 --> 00:11:54,560
two twice right so this thing

312
00:11:53,440 --> 00:11:58,079
will be two

313
00:11:54,560 --> 00:12:01,600
times two right everyone look

314
00:11:58,079 --> 00:12:06,000
original way we have 2 twice yeah

315
00:12:01,600 --> 00:12:07,440
so this i is 2 2 times 2 2 2 so it's 2 2

316
00:12:06,000 --> 00:12:09,600
i look

317
00:12:07,440 --> 00:12:11,440
2 times 2 is 2 2 and now we want to

318
00:12:09,600 --> 00:12:14,160
extend it so basically we want to it

319
00:12:11,440 --> 00:12:15,920
please apply this to the sorted array

320
00:12:14,160 --> 00:12:17,760
right make sense

321
00:12:15,920 --> 00:12:19,080
what's the time complexity this is quite

322
00:12:17,760 --> 00:12:21,920
tricky what's the same complex

323
00:12:19,080 --> 00:12:22,959
[Music]

324
00:12:21,920 --> 00:12:24,959
square

325
00:12:22,959 --> 00:12:27,200
where's the square thing here

326
00:12:24,959 --> 00:12:29,440
oh and cubic

327
00:12:27,200 --> 00:12:32,000
oh there's all oh no

328
00:12:29,440 --> 00:12:33,760
no no no no

329
00:12:32,000 --> 00:12:35,839
there are any elements okay if there are

330
00:12:33,760 --> 00:12:39,519
any elements look remember there are n

331
00:12:35,839 --> 00:12:40,639
elements so this is o n yeah this is our

332
00:12:39,519 --> 00:12:42,800
n

333
00:12:40,639 --> 00:12:45,120
this is o n

334
00:12:42,800 --> 00:12:47,040
right but this one mean to the max so we

335
00:12:45,120 --> 00:12:49,360
have to define another range let's call

336
00:12:47,040 --> 00:12:52,360
it r the range of the minimum to the

337
00:12:49,360 --> 00:12:52,360
maximum

338
00:12:56,160 --> 00:13:01,920
but think about it yeah think about it

339
00:12:58,720 --> 00:13:04,160
and return something okay so one one

340
00:13:01,920 --> 00:13:06,240
problem of this one is as i said if the

341
00:13:04,160 --> 00:13:08,720
range is could be very big this r will

342
00:13:06,240 --> 00:13:11,760
be very big yeah so this is very slow

343
00:13:08,720 --> 00:13:13,440
yeah yeah am right even look if there

344
00:13:11,760 --> 00:13:14,720
are two numbers

345
00:13:13,440 --> 00:13:16,240
a million

346
00:13:14,720 --> 00:13:17,839
so you still have to go through a

347
00:13:16,240 --> 00:13:19,920
million times right

348
00:13:17,839 --> 00:13:21,760
even though two numbers right because

349
00:13:19,920 --> 00:13:23,680
look we are creating buckets a million

350
00:13:21,760 --> 00:13:25,440
buckets yeah we need to count how many

351
00:13:23,680 --> 00:13:28,399
of them right

352
00:13:25,440 --> 00:13:30,560
with the counter counter so you just say

353
00:13:28,399 --> 00:13:32,839
one zero zero zero zero

354
00:13:30,560 --> 00:13:35,480
zero yeah one minute

355
00:13:32,839 --> 00:13:37,680
yeah you get

356
00:13:35,480 --> 00:13:39,279
999. so

357
00:13:37,680 --> 00:13:41,519
that's right yeah so

358
00:13:39,279 --> 00:13:43,680
in what cases can we use the this

359
00:13:41,519 --> 00:13:45,279
counting soft what's the amount of in

360
00:13:43,680 --> 00:13:48,639
what cases we

361
00:13:45,279 --> 00:13:50,880
this disadvantage this this gives a

362
00:13:48,639 --> 00:13:52,560
advantage

363
00:13:50,880 --> 00:13:54,959
can you think of a scenario that we can

364
00:13:52,560 --> 00:13:55,760
use this

365
00:13:54,959 --> 00:13:57,040
uh

366
00:13:55,760 --> 00:13:59,839
when

367
00:13:57,040 --> 00:14:03,040
when there's only a short range of young

368
00:13:59,839 --> 00:14:04,959
numbers well look like what

369
00:14:03,040 --> 00:14:07,120
if you have a million

370
00:14:04,959 --> 00:14:09,600
students in your class and then a

371
00:14:07,120 --> 00:14:12,240
million students have an exam the exam

372
00:14:09,600 --> 00:14:14,959
score from zero to a hundred so they are

373
00:14:12,240 --> 00:14:17,760
100 bucks 101 buckets but they are

374
00:14:14,959 --> 00:14:19,360
million students right

375
00:14:17,760 --> 00:14:21,440
so

376
00:14:19,360 --> 00:14:21,440
n

377
00:14:21,600 --> 00:14:26,079
sorry

378
00:14:22,880 --> 00:14:28,399
say 100 million okay okay maybe not not

379
00:14:26,079 --> 00:14:30,560
quite strictly because this ends still

380
00:14:28,399 --> 00:14:33,360
here we need needs to find out uh n

381
00:14:30,560 --> 00:14:34,480
right so for example if they are

382
00:14:33,360 --> 00:14:36,480
like

383
00:14:34,480 --> 00:14:39,040
if the range is very small like the exam

384
00:14:36,480 --> 00:14:40,160
papers go like from 0 to 100 right and

385
00:14:39,040 --> 00:14:41,839
then there are

386
00:14:40,160 --> 00:14:44,639
you know some students and then you can

387
00:14:41,839 --> 00:14:46,720
count right you can count right you can

388
00:14:44,639 --> 00:14:49,040
count how many scores for like how many

389
00:14:46,720 --> 00:14:51,680
students get a score

390
00:14:49,040 --> 00:14:54,399
one how many students get a score two

391
00:14:51,680 --> 00:14:55,199
three right yeah

392
00:14:54,399 --> 00:14:57,440
what

393
00:14:55,199 --> 00:14:59,040
is this a stable or not remember the

394
00:14:57,440 --> 00:15:02,880
stable thought

395
00:14:59,040 --> 00:15:06,000
do you still remember a stable result

396
00:15:02,880 --> 00:15:08,480
three yeah three parts if after sorting

397
00:15:06,000 --> 00:15:10,720
the order is exchanged if you

398
00:15:08,480 --> 00:15:13,199
after sorting you give me three three

399
00:15:10,720 --> 00:15:15,360
dash three and this is not stable for

400
00:15:13,199 --> 00:15:17,440
this one it's not easy to say right

401
00:15:15,360 --> 00:15:18,560
because we are constructing the number

402
00:15:17,440 --> 00:15:20,880
so

403
00:15:18,560 --> 00:15:23,360
so it's not a stable slope right because

404
00:15:20,880 --> 00:15:26,480
you don't know which which i is which

405
00:15:23,360 --> 00:15:29,759
yeah because we are constructing the any

406
00:15:26,480 --> 00:15:30,639
sorted array makes sense

407
00:15:29,759 --> 00:15:36,759
okay

408
00:15:30,639 --> 00:15:36,759
that's it for today good job bye bye bye

