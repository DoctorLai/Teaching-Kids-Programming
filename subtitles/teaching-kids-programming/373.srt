1
00:00:04,000 --> 00:00:08,880
yesterday we'll talk about this the zero

2
00:00:05,839 --> 00:00:10,320
one knapsack yeah zero one meaning that

3
00:00:08,880 --> 00:00:13,200
each item

4
00:00:10,320 --> 00:00:15,839
that you can pick at most once right so

5
00:00:13,200 --> 00:00:18,400
there's one item for there's one number

6
00:00:15,839 --> 00:00:20,880
the quantity the quantity for each item

7
00:00:18,400 --> 00:00:22,000
is one you can pick it or you you can

8
00:00:20,880 --> 00:00:23,760
skip it

9
00:00:22,000 --> 00:00:26,080
but if you pick it you can only pick one

10
00:00:23,760 --> 00:00:28,720
right so we use the dynamic programming

11
00:00:26,080 --> 00:00:30,960
top-down dynamic programming yeah dfs ic

12
00:00:28,720 --> 00:00:33,760
when we are picking the ice items and we

13
00:00:30,960 --> 00:00:36,000
have a remaining capacity c

14
00:00:33,760 --> 00:00:39,360
right then you have two choice if the

15
00:00:36,000 --> 00:00:41,680
remaining capacity is bigger or larger

16
00:00:39,360 --> 00:00:44,079
larger or equal than the weight of the

17
00:00:41,680 --> 00:00:45,840
current item and you can choose to pick

18
00:00:44,079 --> 00:00:48,239
it right if it's smaller than the

19
00:00:45,840 --> 00:00:50,559
current weight weapon

20
00:00:48,239 --> 00:00:52,719
if the remaining capacity is less than

21
00:00:50,559 --> 00:00:55,120
the weight of the current item do you

22
00:00:52,719 --> 00:00:57,039
can you pick it no no because it's too

23
00:00:55,120 --> 00:00:59,520
heavy right yeah because for example

24
00:00:57,039 --> 00:01:02,719
your capacity is 10 and then the item is

25
00:00:59,520 --> 00:01:04,479
20 you can't put the 20 into your bag 10

26
00:01:02,719 --> 00:01:07,040
right but when it's bigger than the

27
00:01:04,479 --> 00:01:09,280
weight then you can keep you can try

28
00:01:07,040 --> 00:01:12,720
we can try to pick it yeah we don't pick

29
00:01:09,280 --> 00:01:14,479
it we subtract the weight the weight of

30
00:01:12,720 --> 00:01:16,720
the camera item

31
00:01:14,479 --> 00:01:18,960
from the remaining capacity and in the

32
00:01:16,720 --> 00:01:21,280
meantime we added the

33
00:01:18,960 --> 00:01:23,680
the values we get okay and then

34
00:01:21,280 --> 00:01:25,759
obviously for each item we can skip it

35
00:01:23,680 --> 00:01:27,680
but we can skip it then we have still

36
00:01:25,759 --> 00:01:29,840
remaining capacity

37
00:01:27,680 --> 00:01:32,640
yeah and then the key point here is we

38
00:01:29,840 --> 00:01:33,600
use the cache to remember the values

39
00:01:32,640 --> 00:01:36,159
of the

40
00:01:33,600 --> 00:01:38,560
how many values we need to remember

41
00:01:36,159 --> 00:01:41,119
the n times c

42
00:01:38,560 --> 00:01:41,920
n times c so the time complexities o and

43
00:01:41,119 --> 00:01:45,119
c

44
00:01:41,920 --> 00:01:48,880
space complexities o and c as well right

45
00:01:45,119 --> 00:01:51,439
so we are actually storing the values

46
00:01:48,880 --> 00:01:53,680
i times c okay so let's stop down we use

47
00:01:51,439 --> 00:01:56,240
the dynamic programming top down the

48
00:01:53,680 --> 00:01:57,439
question with the minimization right all

49
00:01:56,240 --> 00:01:59,119
right

50
00:01:57,439 --> 00:02:00,590
so in the process

51
00:01:59,119 --> 00:02:02,960
in the bottom up yeah

52
00:02:00,590 --> 00:02:05,600
[Music]

53
00:02:02,960 --> 00:02:06,880
so we need to store these i time c

54
00:02:05,600 --> 00:02:09,440
values

55
00:02:06,880 --> 00:02:11,360
in an array right and then we take

56
00:02:09,440 --> 00:02:14,000
can compute the values we fill the

57
00:02:11,360 --> 00:02:16,480
tables basically look in the bottom we

58
00:02:14,000 --> 00:02:18,560
feel the values first row of values and

59
00:02:16,480 --> 00:02:20,800
then we start feeding the second row

60
00:02:18,560 --> 00:02:23,200
yeah this is bottom up yeah in the top

61
00:02:20,800 --> 00:02:24,879
down we want to calculate this value and

62
00:02:23,200 --> 00:02:26,879
in order to calculate this value with

63
00:02:24,879 --> 00:02:29,599
the question with the recursion with

64
00:02:26,879 --> 00:02:32,400
minimization it needs to retrieve the

65
00:02:29,599 --> 00:02:34,400
value of the previous node and again it

66
00:02:32,400 --> 00:02:37,760
will recursion the location will bring

67
00:02:34,400 --> 00:02:40,720
us down to the value with the smaller i

68
00:02:37,760 --> 00:02:41,519
right i is the row okay

69
00:02:40,720 --> 00:02:43,200
yeah

70
00:02:41,519 --> 00:02:44,959
and how how the computer remember the

71
00:02:43,200 --> 00:02:46,879
values cash

72
00:02:44,959 --> 00:02:49,280
but in flipped r

73
00:02:46,879 --> 00:02:50,640
we we use the i

74
00:02:49,280 --> 00:02:52,720
array

75
00:02:50,640 --> 00:02:54,959
which has two-dimensional array i can

76
00:02:52,720 --> 00:02:56,640
see right to remove the values and then

77
00:02:54,959 --> 00:02:58,800
we start feeling the values from the

78
00:02:56,640 --> 00:03:00,480
first row right after we fill the first

79
00:02:58,800 --> 00:03:02,319
row we fill the second row compute the

80
00:03:00,480 --> 00:03:06,400
second row and compute the third until

81
00:03:02,319 --> 00:03:09,360
we reach this yeah dp

82
00:03:06,400 --> 00:03:11,760
n minus one capacity yeah until we reach

83
00:03:09,360 --> 00:03:13,200
this value okay so let's do this bottom

84
00:03:11,760 --> 00:03:16,080
up okay

85
00:03:13,200 --> 00:03:16,840
just remember the directions yeah bottom

86
00:03:16,080 --> 00:03:20,000
top

87
00:03:16,840 --> 00:03:22,640
down the time complexity for each for

88
00:03:20,000 --> 00:03:25,599
both is is the same the time and space

89
00:03:22,640 --> 00:03:27,680
but usually usually the recursion

90
00:03:25,599 --> 00:03:29,920
is slower than the butter up yeah

91
00:03:27,680 --> 00:03:30,879
usually you know practically speaking

92
00:03:29,920 --> 00:03:33,519
the

93
00:03:30,879 --> 00:03:35,519
butter up approach is faster why is that

94
00:03:33,519 --> 00:03:37,840
because there's no recursion call

95
00:03:35,519 --> 00:03:40,560
there's no function call

96
00:03:37,840 --> 00:03:41,360
for computer for us to call a recursion

97
00:03:40,560 --> 00:03:42,720
right

98
00:03:41,360 --> 00:03:44,879
we need to

99
00:03:42,720 --> 00:03:47,200
spend time overhead in calling the

100
00:03:44,879 --> 00:03:50,560
function recursion yeah okay which is

101
00:03:47,200 --> 00:03:50,560
faster usually come on

102
00:03:50,640 --> 00:03:55,599
and recursion is known

103
00:03:54,000 --> 00:03:56,959
because there's a fun function called

104
00:03:55,599 --> 00:03:59,120
right that's the function called that

105
00:03:56,959 --> 00:04:01,200
you have to we have to push the function

106
00:03:59,120 --> 00:04:03,599
call let's stack we have to push the

107
00:04:01,200 --> 00:04:05,360
call into the stack right that's usually

108
00:04:03,599 --> 00:04:06,319
slower than

109
00:04:05,360 --> 00:04:08,560
us

110
00:04:06,319 --> 00:04:10,159
actively proactively

111
00:04:08,560 --> 00:04:12,400
what you're doing

112
00:04:10,159 --> 00:04:14,879
we're actively installing the values in

113
00:04:12,400 --> 00:04:16,400
in the array okay

114
00:04:14,879 --> 00:04:18,479
okay so

115
00:04:16,400 --> 00:04:21,519
let's just review the problem again

116
00:04:18,479 --> 00:04:23,680
right okay so we have a few items

117
00:04:21,519 --> 00:04:27,280
values uh the weight

118
00:04:23,680 --> 00:04:29,360
is a uh w is the

119
00:04:27,280 --> 00:04:31,919
is the

120
00:04:29,360 --> 00:04:33,600
a list of the weights yeah weights like

121
00:04:31,919 --> 00:04:36,479
one two three okay

122
00:04:33,600 --> 00:04:39,680
and the values i is the values we can

123
00:04:36,479 --> 00:04:42,320
get like one five three okay

124
00:04:39,680 --> 00:04:45,360
right and then pi remember this pi is

125
00:04:42,320 --> 00:04:47,919
the value of zero one selection meaning

126
00:04:45,360 --> 00:04:48,880
that zero we don't pick it one we pick

127
00:04:47,919 --> 00:04:51,120
it right

128
00:04:48,880 --> 00:04:53,040
zero one knob set

129
00:04:51,120 --> 00:04:55,199
and zero one message

130
00:04:53,040 --> 00:04:57,759
so we have also the capacity like

131
00:04:55,199 --> 00:04:59,919
something like five the next step so

132
00:04:57,759 --> 00:05:02,160
what are we trying to maximize here we

133
00:04:59,919 --> 00:05:04,479
are trying to maximize the goal

134
00:05:02,160 --> 00:05:06,080
is to what the maximize let's try to

135
00:05:04,479 --> 00:05:08,639
maximize what

136
00:05:06,080 --> 00:05:11,759
we want to sum up this is the sum right

137
00:05:08,639 --> 00:05:14,639
i equals zero to n minus one and n

138
00:05:11,759 --> 00:05:16,800
equals the number of the item yeah which

139
00:05:14,639 --> 00:05:20,800
is three and three items the size of

140
00:05:16,800 --> 00:05:24,240
these are the same okay items

141
00:05:20,800 --> 00:05:26,320
anyway what did i just say what's n

142
00:05:24,240 --> 00:05:29,360
n is what

143
00:05:26,320 --> 00:05:29,360
is the items

144
00:05:29,840 --> 00:05:34,880
okay so we try look at the sub we try to

145
00:05:32,080 --> 00:05:38,960
maximize i equals zero to m um

146
00:05:34,880 --> 00:05:40,960
minus n minus one so the p i times v i

147
00:05:38,960 --> 00:05:44,000
that's the value we are trying to get

148
00:05:40,960 --> 00:05:46,000
yeah v p i times v i okay

149
00:05:44,000 --> 00:05:48,240
p i times v i okay

150
00:05:46,000 --> 00:05:50,560
and then we also want to

151
00:05:48,240 --> 00:05:54,000
to make sure the total weight does not

152
00:05:50,560 --> 00:05:56,479
exceed exceed the total capacity

153
00:05:54,000 --> 00:05:58,400
so we are trying to do this i equals 1

154
00:05:56,479 --> 00:06:01,520
to angle 0 to

155
00:05:58,400 --> 00:06:05,199
n minus 1 p i

156
00:06:01,520 --> 00:06:08,400
times w i this is the weight okay

157
00:06:05,199 --> 00:06:10,479
and also you know p i

158
00:06:08,400 --> 00:06:12,400
belongs to

159
00:06:10,479 --> 00:06:14,800
zero one one there's only two possible

160
00:06:12,400 --> 00:06:17,199
values you don't click it or we pick it

161
00:06:14,800 --> 00:06:19,120
there make sense do you understand do

162
00:06:17,199 --> 00:06:22,319
you can you read this mathematics

163
00:06:19,120 --> 00:06:23,520
equation to describe the problem

164
00:06:22,319 --> 00:06:25,120
do you know

165
00:06:23,520 --> 00:06:26,960
do you understand all right ryan any

166
00:06:25,120 --> 00:06:29,039
questions come on this is the good good

167
00:06:26,960 --> 00:06:30,560
chance for you to understand that's

168
00:06:29,039 --> 00:06:32,639
mathematics

169
00:06:30,560 --> 00:06:36,080
what are we trying to do here

170
00:06:32,639 --> 00:06:38,639
we're trying to maximize the p i times w

171
00:06:36,080 --> 00:06:41,600
i v i the value look this is the value

172
00:06:38,639 --> 00:06:44,080
yeah we times it something together yeah

173
00:06:41,600 --> 00:06:44,880
now this is the value total value we can

174
00:06:44,080 --> 00:06:48,400
get

175
00:06:44,880 --> 00:06:51,440
subject to make sure that p i times w i

176
00:06:48,400 --> 00:06:52,240
added together does not exist the total

177
00:06:51,440 --> 00:06:54,720
weight

178
00:06:52,240 --> 00:06:55,919
suggests to these uh equals to the way

179
00:06:54,720 --> 00:06:59,199
okay

180
00:06:55,919 --> 00:07:01,180
yeah and each value why this why this pi

181
00:06:59,199 --> 00:07:04,269
has only two values zero one

182
00:07:01,180 --> 00:07:04,269
[Music]

183
00:07:09,520 --> 00:07:14,479
right look what is zero zero times

184
00:07:12,240 --> 00:07:16,960
anything doesn't matter right look one

185
00:07:14,479 --> 00:07:18,960
is a zero zero times wi

186
00:07:16,960 --> 00:07:21,280
is yellow right anything so it means

187
00:07:18,960 --> 00:07:23,599
this item does not take up

188
00:07:21,280 --> 00:07:25,120
any capacity from the original one but

189
00:07:23,599 --> 00:07:26,880
it's one

190
00:07:25,120 --> 00:07:29,360
it's one now we need to edit the value

191
00:07:26,880 --> 00:07:32,319
yeah for example this one

192
00:07:29,360 --> 00:07:34,960
the value two plus three yeah look

193
00:07:32,319 --> 00:07:38,319
what's what's the what's these uh p i

194
00:07:34,960 --> 00:07:40,960
times w i sum together zero times one

195
00:07:38,319 --> 00:07:43,759
plus one times two plus one times three

196
00:07:40,960 --> 00:07:45,759
equals five is less than equal to one

197
00:07:43,759 --> 00:07:47,120
and what's the value

198
00:07:45,759 --> 00:07:49,599
five times one

199
00:07:47,120 --> 00:07:51,840
look at it one times zero plus five

200
00:07:49,599 --> 00:07:54,479
times one plus three times one which is

201
00:07:51,840 --> 00:07:56,560
eight so the maximum is eight right the

202
00:07:54,479 --> 00:07:58,639
weight is five okay

203
00:07:56,560 --> 00:08:00,879
yeah make sense

204
00:07:58,639 --> 00:08:03,039
all right right okay

205
00:08:00,879 --> 00:08:03,840
okay then let's do this the bottom up

206
00:08:03,039 --> 00:08:05,680
okay

207
00:08:03,840 --> 00:08:07,520
let's do this button up

208
00:08:05,680 --> 00:08:10,080
so we suppose we need to store the

209
00:08:07,520 --> 00:08:13,360
values in array right so it's a two

210
00:08:10,080 --> 00:08:13,360
dimensional way remember

211
00:08:13,599 --> 00:08:18,960
yesterday we call this cache

212
00:08:16,639 --> 00:08:22,319
top down and dynamic programming we have

213
00:08:18,960 --> 00:08:26,400
this dms function i and c right so it

214
00:08:22,319 --> 00:08:29,039
has two dimensions i and c so we need to

215
00:08:26,400 --> 00:08:31,360
be able to store the uh these values the

216
00:08:29,039 --> 00:08:33,120
combination of these values yeah

217
00:08:31,360 --> 00:08:36,719
internal array okay

218
00:08:33,120 --> 00:08:38,560
let's say define knapsack

219
00:08:36,719 --> 00:08:41,680
let's take

220
00:08:38,560 --> 00:08:44,959
0 1 and then

221
00:08:41,680 --> 00:08:44,959
we have our values

222
00:08:45,040 --> 00:08:48,560
we have the

223
00:08:46,320 --> 00:08:52,560
weight

224
00:08:48,560 --> 00:08:53,519
and we have the capacity okay capacity

225
00:08:52,560 --> 00:08:55,680
okay

226
00:08:53,519 --> 00:08:58,320
capacity so let's say

227
00:08:55,680 --> 00:09:00,480
dt equal we have we need to allocate the

228
00:08:58,320 --> 00:09:02,080
two-dimensional rate so at the beginning

229
00:09:00,480 --> 00:09:04,720
which is zero

230
00:09:02,080 --> 00:09:09,360
for the second dimensional is capacity

231
00:09:04,720 --> 00:09:12,160
so for underscore in range

232
00:09:09,360 --> 00:09:13,360
c plus one right because we need to be

233
00:09:12,160 --> 00:09:16,000
able to

234
00:09:13,360 --> 00:09:17,680
be able to store the value up to c

235
00:09:16,000 --> 00:09:18,720
including c okay

236
00:09:17,680 --> 00:09:21,519
and then

237
00:09:18,720 --> 00:09:24,080
the first dimension is up to

238
00:09:21,519 --> 00:09:25,680
for underscore in

239
00:09:24,080 --> 00:09:27,680
range

240
00:09:25,680 --> 00:09:29,920
up to n okay

241
00:09:27,680 --> 00:09:32,480
what's n n will be the length of the

242
00:09:29,920 --> 00:09:34,080
values right the length of values the

243
00:09:32,480 --> 00:09:36,160
number of items

244
00:09:34,080 --> 00:09:38,880
is also equal to the num the number of

245
00:09:36,160 --> 00:09:41,040
weights okay

246
00:09:38,880 --> 00:09:43,440
so now the first row remember the first

247
00:09:41,040 --> 00:09:44,880
row yeah this is the first one

248
00:09:43,440 --> 00:09:46,399
and they can't tell me what's the first

249
00:09:44,880 --> 00:09:48,720
row okay so i

250
00:09:46,399 --> 00:09:51,600
this is the first item okay first item

251
00:09:48,720 --> 00:09:55,519
the second item third either here

252
00:09:51,600 --> 00:09:57,920
n minus one the capacity or capacity

253
00:09:55,519 --> 00:10:00,080
cll capacity we want to take fact

254
00:09:57,920 --> 00:10:02,240
nothing when the back

255
00:10:00,080 --> 00:10:05,120
has zero capacity when the back has one

256
00:10:02,240 --> 00:10:06,160
capacity two capacity etcetera and here

257
00:10:05,120 --> 00:10:07,040
c

258
00:10:06,160 --> 00:10:09,920
okay

259
00:10:07,040 --> 00:10:12,480
so the first row we need to be we we you

260
00:10:09,920 --> 00:10:14,079
know for the recursion top down dynamic

261
00:10:12,480 --> 00:10:16,320
problem with the recursion we can use

262
00:10:14,079 --> 00:10:18,480
the if remember if c

263
00:10:16,320 --> 00:10:21,040
is smaller if i smaller than zero will

264
00:10:18,480 --> 00:10:22,320
become zero right we can just do an if

265
00:10:21,040 --> 00:10:23,920
chair

266
00:10:22,320 --> 00:10:25,920
so that's easier

267
00:10:23,920 --> 00:10:28,880
that's that's easier for us to implement

268
00:10:25,920 --> 00:10:31,440
but for the top uh butter up we need to

269
00:10:28,880 --> 00:10:33,600
be a we need to

270
00:10:31,440 --> 00:10:35,519
tell the computer what values are those

271
00:10:33,600 --> 00:10:36,880
this initial value

272
00:10:35,519 --> 00:10:38,200
so dp

273
00:10:36,880 --> 00:10:41,720
can you tell me what

274
00:10:38,200 --> 00:10:43,360
pp0 the first law

275
00:10:41,720 --> 00:10:45,920
tp0c

276
00:10:43,360 --> 00:10:47,760
what should we give to the value when we

277
00:10:45,920 --> 00:10:50,399
are considering first row

278
00:10:47,760 --> 00:10:52,240
and then we have the capacity so we are

279
00:10:50,399 --> 00:10:54,000
only considering the first item okay

280
00:10:52,240 --> 00:10:56,320
this is the first item

281
00:10:54,000 --> 00:10:58,000
yeah and then we have a back with the

282
00:10:56,320 --> 00:10:59,360
capacity c

283
00:10:58,000 --> 00:11:02,000
okay so

284
00:10:59,360 --> 00:11:04,240
so what's the maximum value we can get

285
00:11:02,000 --> 00:11:05,760
come on we have only one item and we

286
00:11:04,240 --> 00:11:07,680
have a bag with the

287
00:11:05,760 --> 00:11:09,839
capacity c

288
00:11:07,680 --> 00:11:12,240
so what values you are what where what

289
00:11:09,839 --> 00:11:14,480
maximum value can we get one

290
00:11:12,240 --> 00:11:16,560
one no no no

291
00:11:14,480 --> 00:11:19,279
you need y is one

292
00:11:16,560 --> 00:11:22,399
why is one y is zero think about it okay

293
00:11:19,279 --> 00:11:25,360
so this item has the value

294
00:11:22,399 --> 00:11:28,360
has the very v zero okay has the weight

295
00:11:25,360 --> 00:11:28,360
w0

296
00:11:28,560 --> 00:11:32,640
i'm telling you

297
00:11:30,160 --> 00:11:35,519
that the item has the value zero this

298
00:11:32,640 --> 00:11:37,600
value this weight and what is it with

299
00:11:35,519 --> 00:11:40,640
this capacity c

300
00:11:37,600 --> 00:11:42,640
so what's the value we can get

301
00:11:40,640 --> 00:11:45,519
what's the value we can get what should

302
00:11:42,640 --> 00:11:46,560
i put this in here come on should we we

303
00:11:45,519 --> 00:11:48,320
need to

304
00:11:46,560 --> 00:11:50,160
first of all check which one is bigger

305
00:11:48,320 --> 00:11:52,480
right yeah

306
00:11:50,160 --> 00:11:54,639
this value this this way

307
00:11:52,480 --> 00:11:57,600
when this weight is smaller than c what

308
00:11:54,639 --> 00:11:59,760
happened

309
00:11:57,600 --> 00:12:03,040
when when the item i'm trying to put in

310
00:11:59,760 --> 00:12:04,160
the back is is smaller so i can get this

311
00:12:03,040 --> 00:12:07,360
value right

312
00:12:04,160 --> 00:12:09,519
yeah but when this is bigger

313
00:12:07,360 --> 00:12:11,279
when this is heavier bigger than c what

314
00:12:09,519 --> 00:12:14,000
happened

315
00:12:11,279 --> 00:12:15,760
then so what's the value there

316
00:12:14,000 --> 00:12:16,560
we can't poke it what's the value we can

317
00:12:15,760 --> 00:12:18,240
get

318
00:12:16,560 --> 00:12:20,959
if we don't put it put it oh there's

319
00:12:18,240 --> 00:12:20,959
only one item

320
00:12:21,200 --> 00:12:25,360
there's one bag with c

321
00:12:23,279 --> 00:12:27,760
and this item when this weight is

322
00:12:25,360 --> 00:12:30,160
smaller than c okay we can put it put it

323
00:12:27,760 --> 00:12:31,839
we get this value but if we can't put it

324
00:12:30,160 --> 00:12:33,519
when this value is bigger than c we

325
00:12:31,839 --> 00:12:35,040
can't put it what happened what's the

326
00:12:33,519 --> 00:12:36,839
value

327
00:12:35,040 --> 00:12:38,639
zero exactly that's

328
00:12:36,839 --> 00:12:41,360
it but

329
00:12:38,639 --> 00:12:43,120
that's true situation remember yeah

330
00:12:41,360 --> 00:12:44,160
that's two different cases you need to

331
00:12:43,120 --> 00:12:45,440
tell me

332
00:12:44,160 --> 00:12:47,920
right

333
00:12:45,440 --> 00:12:50,079
i'm right does it make sense yeah

334
00:12:47,920 --> 00:12:52,240
yeah

335
00:12:50,079 --> 00:12:53,920
make sense look this value needs to be

336
00:12:52,240 --> 00:12:56,639
if it's heavier than a plug you can't

337
00:12:53,920 --> 00:12:59,920
put it that's zero but it's if we can

338
00:12:56,639 --> 00:13:00,880
put it that's the value we can get right

339
00:12:59,920 --> 00:13:02,800
yeah

340
00:13:00,880 --> 00:13:05,040
so we need to initialize this value we

341
00:13:02,800 --> 00:13:06,959
have the first row okay so we need to

342
00:13:05,040 --> 00:13:07,920
initialize the first one

343
00:13:06,959 --> 00:13:08,720
for

344
00:13:07,920 --> 00:13:09,680
i

345
00:13:08,720 --> 00:13:11,040
in

346
00:13:09,680 --> 00:13:13,360
range

347
00:13:11,040 --> 00:13:14,399
capacity plus one right

348
00:13:13,360 --> 00:13:17,680
look

349
00:13:14,399 --> 00:13:18,880
dp the first row the first item

350
00:13:17,680 --> 00:13:22,959
and

351
00:13:18,880 --> 00:13:23,920
the capacity i equal even zero

352
00:13:22,959 --> 00:13:26,399
if

353
00:13:23,920 --> 00:13:29,040
is what is the weight yeah the weight

354
00:13:26,399 --> 00:13:31,600
let's put the easy one w

355
00:13:29,040 --> 00:13:35,519
if the first item

356
00:13:31,600 --> 00:13:38,639
the weight is bigger than than i

357
00:13:35,519 --> 00:13:41,279
right now we can put it right

358
00:13:38,639 --> 00:13:43,199
and if we can put it then that's zero

359
00:13:41,279 --> 00:13:44,240
right can you actually understand this

360
00:13:43,199 --> 00:13:46,480
one

361
00:13:44,240 --> 00:13:47,920
what what are we doing here

362
00:13:46,480 --> 00:13:49,199
what are we doing here the whole thing

363
00:13:47,920 --> 00:13:52,720
here

364
00:13:49,199 --> 00:13:54,160
what are we doing anybody everyone

365
00:13:52,720 --> 00:13:56,160
we are

366
00:13:54,160 --> 00:13:57,920
doing

367
00:13:56,160 --> 00:14:00,399
the first round we want to put a

368
00:13:57,920 --> 00:14:02,480
computer first row right and first law

369
00:14:00,399 --> 00:14:05,760
is that this is we are considered in the

370
00:14:02,480 --> 00:14:06,399
first item right and then if we can put

371
00:14:05,760 --> 00:14:08,800
it

372
00:14:06,399 --> 00:14:12,000
then we put a if we can put it we put a

373
00:14:08,800 --> 00:14:15,440
vi for example yeah vi here yeah

374
00:14:12,000 --> 00:14:16,959
if yeah if we can put it for v v0 here

375
00:14:15,440 --> 00:14:18,800
all right if component

376
00:14:16,959 --> 00:14:20,480
if the way uh

377
00:14:18,800 --> 00:14:24,160
look at the c

378
00:14:20,480 --> 00:14:26,880
w zero is bigger than i if w zero is

379
00:14:24,160 --> 00:14:29,600
bigger than i then

380
00:14:26,880 --> 00:14:32,959
that's bigger than i i i is increasing

381
00:14:29,600 --> 00:14:34,240
if i is increasing then then

382
00:14:32,959 --> 00:14:36,160
uh

383
00:14:34,240 --> 00:14:37,920
i i is increasing the capacity

384
00:14:36,160 --> 00:14:39,040
increasing then there will be zero

385
00:14:37,920 --> 00:14:42,399
obviously

386
00:14:39,040 --> 00:14:44,560
in the right right it could be zero

387
00:14:42,399 --> 00:14:46,240
look if c

388
00:14:44,560 --> 00:14:49,680
is bigger

389
00:14:46,240 --> 00:14:51,360
if the capacity c is smaller look if

390
00:14:49,680 --> 00:14:53,760
it's more if it's bigger than that that

391
00:14:51,360 --> 00:14:56,399
will be here would be the value

392
00:14:53,760 --> 00:14:58,560
like most likely okay most likely

393
00:14:56,399 --> 00:15:00,800
but if the capacity is smaller than the

394
00:14:58,560 --> 00:15:02,720
value like this would be zero right

395
00:15:00,800 --> 00:15:04,399
yeah i'm just giving you some example

396
00:15:02,720 --> 00:15:07,040
and after this we're filling the first

397
00:15:04,399 --> 00:15:08,399
row and then now what should we do after

398
00:15:07,040 --> 00:15:10,399
we fill in the first row what should we

399
00:15:08,399 --> 00:15:13,120
do now

400
00:15:10,399 --> 00:15:14,000
second row until which row

401
00:15:13,120 --> 00:15:16,399
three

402
00:15:14,000 --> 00:15:18,560
until n minus one row because we have an

403
00:15:16,399 --> 00:15:21,920
items right so that the first row will

404
00:15:18,560 --> 00:15:25,199
be for i in we start from the second row

405
00:15:21,920 --> 00:15:27,440
which is one second row right up to n

406
00:15:25,199 --> 00:15:30,079
the interval and the second iteration

407
00:15:27,440 --> 00:15:33,440
will be for j in range

408
00:15:30,079 --> 00:15:36,800
let's start to c plus one right and then

409
00:15:33,440 --> 00:15:39,920
now i i can i can feel each

410
00:15:36,800 --> 00:15:44,079
each pixel yeah so each each uh each

411
00:15:39,920 --> 00:15:46,560
number in each law in the ira dpij

412
00:15:44,079 --> 00:15:48,880
equals max

413
00:15:46,560 --> 00:15:51,600
max of what dpi's actually do we need

414
00:15:48,880 --> 00:15:53,360
the pij

415
00:15:51,600 --> 00:15:55,279
we

416
00:15:53,360 --> 00:15:57,920
we probably don't need it okay let me

417
00:15:55,279 --> 00:16:01,440
let me write it first

418
00:15:57,920 --> 00:16:03,839
dpij and look if we can if we don't take

419
00:16:01,440 --> 00:16:06,480
it obviously would be j

420
00:16:03,839 --> 00:16:08,880
dpi minus one right the previous item

421
00:16:06,480 --> 00:16:10,720
with sphere 3 complexity

422
00:16:08,880 --> 00:16:13,279
if we can pick it

423
00:16:10,720 --> 00:16:16,880
if we can pick it i minus 1

424
00:16:13,279 --> 00:16:18,959
j minus the weight weight will be which

425
00:16:16,880 --> 00:16:19,759
item

426
00:16:18,959 --> 00:16:20,880
i

427
00:16:19,759 --> 00:16:24,399
right

428
00:16:20,880 --> 00:16:26,399
and at the meantime we have the value

429
00:16:24,399 --> 00:16:29,120
value let's call let's

430
00:16:26,399 --> 00:16:31,759
let's change this to value yeah the

431
00:16:29,120 --> 00:16:33,839
value i right

432
00:16:31,759 --> 00:16:35,199
what's the sound

433
00:16:33,839 --> 00:16:36,560
okay

434
00:16:35,199 --> 00:16:39,360
and but look

435
00:16:36,560 --> 00:16:42,800
the j needs to be bigger than w i right

436
00:16:39,360 --> 00:16:44,720
so i have to say if j bigger or equal

437
00:16:42,800 --> 00:16:47,759
than w i

438
00:16:44,720 --> 00:16:51,040
s otherwise l otherwise they'll be just

439
00:16:47,759 --> 00:16:53,519
zero okay yeah and then and then at the

440
00:16:51,040 --> 00:16:55,120
end we just return

441
00:16:53,519 --> 00:16:58,480
dp

442
00:16:55,120 --> 00:17:00,720
n minus one capacity c

443
00:16:58,480 --> 00:17:00,720
right

444
00:17:01,199 --> 00:17:05,439
i

445
00:17:02,320 --> 00:17:07,679
j look when we compute the dpi jig we

446
00:17:05,439 --> 00:17:10,559
are only

447
00:17:07,679 --> 00:17:13,039
relying on i minus one the previous row

448
00:17:10,559 --> 00:17:15,919
j and y so we probably don't need to put

449
00:17:13,039 --> 00:17:17,439
a max here right we can just say dpij

450
00:17:15,919 --> 00:17:20,799
equals least

451
00:17:17,439 --> 00:17:24,160
uh max obviously max max of these two

452
00:17:20,799 --> 00:17:26,240
approaches okay either we don't pick it

453
00:17:24,160 --> 00:17:30,000
we don't pick it we still remaining j

454
00:17:26,240 --> 00:17:31,520
capacity or we pick it j minus w i w i

455
00:17:30,000 --> 00:17:32,960
is the current weight of the current

456
00:17:31,520 --> 00:17:33,600
either j minus

457
00:17:32,960 --> 00:17:36,080
i

458
00:17:33,600 --> 00:17:38,480
but if we pick it we get the

459
00:17:36,080 --> 00:17:39,360
value that v i okay

460
00:17:38,480 --> 00:17:42,160
yeah

461
00:17:39,360 --> 00:17:43,919
yeah if j bigger than w i right if j is

462
00:17:42,160 --> 00:17:46,720
smaller than w i what does it mean it

463
00:17:43,919 --> 00:17:48,559
means that the current weight the item

464
00:17:46,720 --> 00:17:49,679
current weight too much

465
00:17:48,559 --> 00:17:53,440
yeah

466
00:17:49,679 --> 00:17:55,440
has has exceeded the capacity of j like

467
00:17:53,440 --> 00:17:57,120
in this case we can pick it and let's

468
00:17:55,440 --> 00:18:01,840
zero right remember this is quite

469
00:17:57,120 --> 00:18:03,840
similar to here right yeah i rely on

470
00:18:01,840 --> 00:18:05,120
anybody

471
00:18:03,840 --> 00:18:06,080
all right

472
00:18:05,120 --> 00:18:07,919
yeah

473
00:18:06,080 --> 00:18:10,640
what's the time complexity come on it's

474
00:18:07,919 --> 00:18:10,640
a easy one

475
00:18:11,280 --> 00:18:15,520
and then

476
00:18:12,480 --> 00:18:18,880
oh and c because we're just feeding them

477
00:18:15,520 --> 00:18:21,679
we're just feeding the uh table yeah

478
00:18:18,880 --> 00:18:24,080
rows by rows column by columns yeah

479
00:18:21,679 --> 00:18:25,919
we're starting feeding yeah one by one

480
00:18:24,080 --> 00:18:26,960
and the first row here and then second

481
00:18:25,919 --> 00:18:28,400
row

482
00:18:26,960 --> 00:18:30,160
and then so

483
00:18:28,400 --> 00:18:32,400
yeah we are trying to fill in the table

484
00:18:30,160 --> 00:18:34,799
yeah yeah we're trying to find whatever

485
00:18:32,400 --> 00:18:36,880
when we fill in this table we need to

486
00:18:34,799 --> 00:18:38,320
compute we need to rely on the previous

487
00:18:36,880 --> 00:18:41,200
one this one

488
00:18:38,320 --> 00:18:42,400
for example we are calculating here we

489
00:18:41,200 --> 00:18:44,160
are calculating

490
00:18:42,400 --> 00:18:46,400
this this

491
00:18:44,160 --> 00:18:48,240
cell here yeah so we need to compare

492
00:18:46,400 --> 00:18:50,320
this value which we have

493
00:18:48,240 --> 00:18:51,679
we have computed yeah and then we need

494
00:18:50,320 --> 00:18:54,960
to go through the

495
00:18:51,679 --> 00:18:56,559
the range j minus w i could be somewhere

496
00:18:54,960 --> 00:18:58,720
somewhere some somewhere here yeah for

497
00:18:56,559 --> 00:19:00,880
example if with this one then which one

498
00:18:58,720 --> 00:19:03,039
is bigger and then i put it here i stole

499
00:19:00,880 --> 00:19:05,440
the value here right

500
00:19:03,039 --> 00:19:07,200
yeah and when i store this value here

501
00:19:05,440 --> 00:19:09,679
the next row

502
00:19:07,200 --> 00:19:11,440
yeah the next when i take it right here

503
00:19:09,679 --> 00:19:12,160
i also need to

504
00:19:11,440 --> 00:19:13,919
to

505
00:19:12,160 --> 00:19:16,000
reference this one right and then the

506
00:19:13,919 --> 00:19:17,679
previous one right make sense

507
00:19:16,000 --> 00:19:19,600
yeah

508
00:19:17,679 --> 00:19:22,780
okay so to sum up what have you learned

509
00:19:19,600 --> 00:19:27,170
so far today

510
00:19:22,780 --> 00:19:27,170
[Music]

511
00:19:35,420 --> 00:19:39,120
[Music]

512
00:19:36,799 --> 00:19:40,960
so what what

513
00:19:39,120 --> 00:19:43,440
what approach is this we are we are

514
00:19:40,960 --> 00:19:45,440
calculating from bottom to up so what

515
00:19:43,440 --> 00:19:46,799
are we calling bottom of dynamic

516
00:19:45,440 --> 00:19:49,760
programming okay what's dynamic

517
00:19:46,799 --> 00:19:51,919
programming come on uh just remembering

518
00:19:49,760 --> 00:19:53,600
stuff remember stuff we're done

519
00:19:51,919 --> 00:19:55,679
remembering the values yeah we're

520
00:19:53,600 --> 00:19:57,840
remembering that very well positively

521
00:19:55,679 --> 00:20:00,080
solving the values in the array right

522
00:19:57,840 --> 00:20:01,840
that's the difference to the

523
00:20:00,080 --> 00:20:04,480
top-down dynamic programming which we

524
00:20:01,840 --> 00:20:06,720
use just the magic keyword cache right

525
00:20:04,480 --> 00:20:08,640
we ask computer to catch it

526
00:20:06,720 --> 00:20:10,960
yeah the top down the top down we want

527
00:20:08,640 --> 00:20:12,799
to calculate this value yeah okay this

528
00:20:10,960 --> 00:20:14,320
is the keyboard come on

529
00:20:12,799 --> 00:20:16,159
top down dynamic programming we want to

530
00:20:14,320 --> 00:20:18,559
calculate this value we ask computer

531
00:20:16,159 --> 00:20:21,440
okay let's compare that just to this top

532
00:20:18,559 --> 00:20:23,280
down yeah you could uh for each value

533
00:20:21,440 --> 00:20:25,280
you might we

534
00:20:23,280 --> 00:20:26,960
you will have a cash to remember yeah

535
00:20:25,280 --> 00:20:29,440
you can have this it knows how to

536
00:20:26,960 --> 00:20:32,159
remember once can you calculate it let's

537
00:20:29,440 --> 00:20:34,159
stop now but for the butter up we we are

538
00:20:32,159 --> 00:20:35,760
constructing the table by ourselves

539
00:20:34,159 --> 00:20:38,000
proactively right we're starting the

540
00:20:35,760 --> 00:20:40,640
values in the dp right we can build the

541
00:20:38,000 --> 00:20:42,159
first row we store the value in a table

542
00:20:40,640 --> 00:20:43,840
and we use the first row to compute the

543
00:20:42,159 --> 00:20:46,240
second row we use the second row to

544
00:20:43,840 --> 00:20:48,400
compute the third row etc until we reach

545
00:20:46,240 --> 00:20:51,039
the n minus one row okay

546
00:20:48,400 --> 00:20:53,280
to answer okay the last row okay

547
00:20:51,039 --> 00:20:53,280
yeah

548
00:20:54,240 --> 00:20:58,159
uh practically speaking the top-down

549
00:20:56,400 --> 00:21:00,080
dynamic programming is easier to

550
00:20:58,159 --> 00:21:03,360
implement because the for the you know

551
00:21:00,080 --> 00:21:06,559
for the boundary yeah for the boundary

552
00:21:03,360 --> 00:21:09,280
if if the weight is smaller than

553
00:21:06,559 --> 00:21:12,480
if the current capacity is smaller than

554
00:21:09,280 --> 00:21:13,919
the weight of the current item then it

555
00:21:12,480 --> 00:21:16,240
returns zero but

556
00:21:13,919 --> 00:21:18,159
so we have to say okay it's zero right

557
00:21:16,240 --> 00:21:19,520
yeah yeah yeah okay

558
00:21:18,159 --> 00:21:21,840
so ideally

559
00:21:19,520 --> 00:21:23,840
so to sum up the total dynamic

560
00:21:21,840 --> 00:21:26,559
programming is

561
00:21:23,840 --> 00:21:28,400
is what it's easier to

562
00:21:26,559 --> 00:21:30,960
implement yeah because we're just making

563
00:21:28,400 --> 00:21:33,280
use of the cache it match to match

564
00:21:30,960 --> 00:21:35,919
keyword cache to ask computer to

565
00:21:33,280 --> 00:21:38,080
remember the very fast right it's easier

566
00:21:35,919 --> 00:21:40,960
to implement

567
00:21:38,080 --> 00:21:43,039
the top part of dynamic programming

568
00:21:40,960 --> 00:21:45,120
in a reverse way yeah a calculated value

569
00:21:43,039 --> 00:21:46,000
in the reverse order

570
00:21:45,120 --> 00:21:48,640
is

571
00:21:46,000 --> 00:21:50,559
you know it's it's it's not

572
00:21:48,640 --> 00:21:52,559
so easy to implement right we have to

573
00:21:50,559 --> 00:21:54,960
construct the values array two two

574
00:21:52,559 --> 00:21:56,159
dimensional arrays with stored values in

575
00:21:54,960 --> 00:21:58,880
it right

576
00:21:56,159 --> 00:22:00,400
and then it's it's i mean there's

577
00:21:58,880 --> 00:22:02,000
details that

578
00:22:00,400 --> 00:22:03,919
you might go wrong that things might go

579
00:22:02,000 --> 00:22:04,720
wrong right but it's quicker

580
00:22:03,919 --> 00:22:06,880
yeah

581
00:22:04,720 --> 00:22:10,480
in terms of time and space complexity

582
00:22:06,880 --> 00:22:12,640
both are the same right because both are

583
00:22:10,480 --> 00:22:15,840
all computing the values filling the

584
00:22:12,640 --> 00:22:18,400
values in the table and each one is only

585
00:22:15,840 --> 00:22:21,360
calculated once right either using cash

586
00:22:18,400 --> 00:22:22,880
or using the array make sense

587
00:22:21,360 --> 00:22:27,159
yeah

588
00:22:22,880 --> 00:22:27,159
okay that's it for today bye

