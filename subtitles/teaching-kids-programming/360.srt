1
00:00:00,640 --> 00:00:04,799
hello miss very mister right now you're

2
00:00:02,560 --> 00:00:06,960
right

3
00:00:04,799 --> 00:00:09,920
okay so what we talked about yesterday

4
00:00:06,960 --> 00:00:12,160
is that we given a list of numbers and

5
00:00:09,920 --> 00:00:14,920
we want to find out if we can partition

6
00:00:12,160 --> 00:00:18,080
the array into two halves right and both

7
00:00:14,920 --> 00:00:19,920
have both halves have an equal subsystem

8
00:00:18,080 --> 00:00:23,279
for example in this case this is one

9
00:00:19,920 --> 00:00:25,199
five eleven five ryan

10
00:00:23,279 --> 00:00:26,560
can we partition this array into two

11
00:00:25,199 --> 00:00:28,960
halves

12
00:00:26,560 --> 00:00:31,279
whichever five and eleven yeah whether

13
00:00:28,960 --> 00:00:34,160
so look one five five

14
00:00:31,279 --> 00:00:36,960
five five is ten and first one yeah and

15
00:00:34,160 --> 00:00:39,840
eleven is separate eleven is a separate

16
00:00:36,960 --> 00:00:42,559
subsequent okay so for in we can proof

17
00:00:39,840 --> 00:00:45,360
off yeah because the pro to profit

18
00:00:42,559 --> 00:00:47,600
to generate all the subsequence it takes

19
00:00:45,360 --> 00:00:50,000
the o two to the power of n right

20
00:00:47,600 --> 00:00:51,520
because for each number we can choose to

21
00:00:50,000 --> 00:00:53,680
pick or skip

22
00:00:51,520 --> 00:00:56,160
and then there are n numbers so each one

23
00:00:53,680 --> 00:00:57,760
is so you multiply two n times that's

24
00:00:56,160 --> 00:00:59,840
the two to the power of n

25
00:00:57,760 --> 00:01:02,800
let's the time complexity if we go in

26
00:00:59,840 --> 00:01:04,879
for the blue forcing that's too slow and

27
00:01:02,800 --> 00:01:07,520
especially for each one it's

28
00:01:04,879 --> 00:01:09,520
subsequently generated we have to check

29
00:01:07,520 --> 00:01:11,360
that we have the calculated sum right

30
00:01:09,520 --> 00:01:13,119
and it takes another end time so it

31
00:01:11,360 --> 00:01:15,520
needs to times n right

32
00:01:13,119 --> 00:01:16,720
that's way too slow so yesterday we

33
00:01:15,520 --> 00:01:20,640
talked about top-down dynamic

34
00:01:16,720 --> 00:01:21,759
programming which we declare uh dpis

35
00:01:20,640 --> 00:01:24,479
so which

36
00:01:21,759 --> 00:01:25,759
which means that can we pick the numbers

37
00:01:24,479 --> 00:01:28,400
from i

38
00:01:25,759 --> 00:01:29,600
to the end that's a sub array we can can

39
00:01:28,400 --> 00:01:31,920
we pick

40
00:01:29,600 --> 00:01:36,240
can we pick the subset from this range

41
00:01:31,920 --> 00:01:38,640
which is subset s right so then it need

42
00:01:36,240 --> 00:01:38,640
um

43
00:01:38,880 --> 00:01:42,640
so

44
00:01:39,680 --> 00:01:43,759
so it has this dynamic programming uh

45
00:01:42,640 --> 00:01:46,560
equation

46
00:01:43,759 --> 00:01:47,680
yeah that's the original version

47
00:01:46,560 --> 00:01:50,799
so look

48
00:01:47,680 --> 00:01:53,119
if i reached the end then we need to

49
00:01:50,799 --> 00:01:56,000
check if the subsequent s equals zero

50
00:01:53,119 --> 00:01:57,840
right and if at any point as fail falls

51
00:01:56,000 --> 00:01:59,200
below zero that means that we're using

52
00:01:57,840 --> 00:02:02,000
too much sum

53
00:01:59,200 --> 00:02:03,360
we we are using too much numbers uh for

54
00:02:02,000 --> 00:02:04,799
this

55
00:02:03,360 --> 00:02:06,640
for this subsequence and then we

56
00:02:04,799 --> 00:02:09,440
determine fourth yeah because all the

57
00:02:06,640 --> 00:02:12,239
numbers in in the array is positive

58
00:02:09,440 --> 00:02:14,879
numbers positive integers if the sum

59
00:02:12,239 --> 00:02:16,400
falls below zero it will never come back

60
00:02:14,879 --> 00:02:19,040
to zero right

61
00:02:16,400 --> 00:02:21,440
and then the equation will be like if we

62
00:02:19,040 --> 00:02:23,200
pick this number then we start from the

63
00:02:21,440 --> 00:02:25,680
we have used this number and we start

64
00:02:23,200 --> 00:02:27,120
from next number and the sum we reduce

65
00:02:25,680 --> 00:02:29,200
the sum right

66
00:02:27,120 --> 00:02:31,760
if we don't pick this number then the

67
00:02:29,200 --> 00:02:34,319
sum remains right makes sense

68
00:02:31,760 --> 00:02:36,720
okay so this is based on these but we

69
00:02:34,319 --> 00:02:38,800
can also make it

70
00:02:36,720 --> 00:02:41,120
make it slightly different that can we

71
00:02:38,800 --> 00:02:43,599
pick the numbers from the can we pick

72
00:02:41,120 --> 00:02:46,160
the subsequence from the

73
00:02:43,599 --> 00:02:48,400
up to these the first i numbers for the

74
00:02:46,160 --> 00:02:50,720
first i numbers so

75
00:02:48,400 --> 00:02:53,680
with the subset of s so here will be

76
00:02:50,720 --> 00:02:56,160
chance to if s false below to zero we

77
00:02:53,680 --> 00:02:58,400
return we check if the sum is zero this

78
00:02:56,160 --> 00:03:01,200
is still the same and instead of plus

79
00:02:58,400 --> 00:03:03,360
one with minus one right with minus one

80
00:03:01,200 --> 00:03:05,200
going backwards yes going backwards if

81
00:03:03,360 --> 00:03:07,360
we want to calculate put i

82
00:03:05,200 --> 00:03:09,360
so initially

83
00:03:07,360 --> 00:03:12,159
so we want to get uh calculate this

84
00:03:09,360 --> 00:03:15,360
final answer instead of putting the dp

85
00:03:12,159 --> 00:03:17,040
dp 0 right and we now we need to change

86
00:03:15,360 --> 00:03:19,200
to dp

87
00:03:17,040 --> 00:03:21,440
n minus 1 where n is the number of

88
00:03:19,200 --> 00:03:23,840
elements the index starts from zero so

89
00:03:21,440 --> 00:03:25,920
the last index will be n minus one and

90
00:03:23,840 --> 00:03:26,959
because in order to calculate n minus

91
00:03:25,920 --> 00:03:27,760
one

92
00:03:26,959 --> 00:03:29,840
and

93
00:03:27,760 --> 00:03:33,040
n minus one and then you you'll be

94
00:03:29,840 --> 00:03:35,440
recursively calling n minus uh n minus

95
00:03:33,040 --> 00:03:38,159
two which and again minus three minus

96
00:03:35,440 --> 00:03:41,360
four until i falls below zero that will

97
00:03:38,159 --> 00:03:44,400
be considered left leg okay

98
00:03:41,360 --> 00:03:47,280
so let's uh dynamic programming

99
00:03:44,400 --> 00:03:49,760
put a top down yeah top down recursive

100
00:03:47,280 --> 00:03:52,959
call calling the uh function recursion

101
00:03:49,760 --> 00:03:56,480
right we we want to call that dpn

102
00:03:52,959 --> 00:03:58,560
cpn and you'll call it dp dpp

103
00:03:56,480 --> 00:04:01,439
n minus one right if we're going for the

104
00:03:58,560 --> 00:04:04,080
first uh the original version we want to

105
00:04:01,439 --> 00:04:05,360
give it a girl dp zero then you'll call

106
00:04:04,080 --> 00:04:08,159
that dp

107
00:04:05,360 --> 00:04:09,360
dp one and go db2 right it's the same

108
00:04:08,159 --> 00:04:11,840
thing

109
00:04:09,360 --> 00:04:13,840
so we can actually

110
00:04:11,840 --> 00:04:15,200
we can actually store the numbers in an

111
00:04:13,840 --> 00:04:16,959
array and then

112
00:04:15,200 --> 00:04:19,199
in a two dimensional array right right

113
00:04:16,959 --> 00:04:20,400
in order to do it

114
00:04:19,199 --> 00:04:22,000
right n

115
00:04:20,400 --> 00:04:23,840
what you're doing

116
00:04:22,000 --> 00:04:25,840
well the time conductance for this one

117
00:04:23,840 --> 00:04:28,400
is

118
00:04:25,840 --> 00:04:30,800
is what this this sum as s and the

119
00:04:28,400 --> 00:04:32,960
numbers will be n so the time come next

120
00:04:30,800 --> 00:04:35,759
will be s n o s n

121
00:04:32,960 --> 00:04:38,400
space complexity is also osm because of

122
00:04:35,759 --> 00:04:40,400
putting the cache and each combination

123
00:04:38,400 --> 00:04:42,240
of i and s

124
00:04:40,400 --> 00:04:44,320
so there are possibilities here and

125
00:04:42,240 --> 00:04:46,560
there are s possibilities here right so

126
00:04:44,320 --> 00:04:48,800
we multiply that that that's the space

127
00:04:46,560 --> 00:04:51,040
we're going to save we wanted to use

128
00:04:48,800 --> 00:04:54,320
right we're catching the values

129
00:04:51,040 --> 00:04:55,360
so we can actually using the bottom-up

130
00:04:54,320 --> 00:04:58,560
approach

131
00:04:55,360 --> 00:05:00,400
but i've approached so we in in order to

132
00:04:58,560 --> 00:05:03,120
do this spot out we need to store the

133
00:05:00,400 --> 00:05:05,440
numbers we need to store the numbers uh

134
00:05:03,120 --> 00:05:07,199
in a two dimensional array okay in a two

135
00:05:05,440 --> 00:05:08,880
minute dimensional array so i'm just

136
00:05:07,199 --> 00:05:10,720
going to write it okay

137
00:05:08,880 --> 00:05:12,639
so the beginning will be the same we

138
00:05:10,720 --> 00:05:14,960
first of all we sum up the sums and we

139
00:05:12,639 --> 00:05:16,560
check if the number is even or if it's

140
00:05:14,960 --> 00:05:19,199
odd then return first immediately

141
00:05:16,560 --> 00:05:21,280
because there's no way to to split the

142
00:05:19,199 --> 00:05:22,160
partition in the array into two sub sum

143
00:05:21,280 --> 00:05:24,479
okay

144
00:05:22,160 --> 00:05:26,560
so i'm going to define

145
00:05:24,479 --> 00:05:29,360
let's say

146
00:05:26,560 --> 00:05:29,360
subset sound

147
00:05:29,680 --> 00:05:34,720
ryan what are you still singing i'm not

148
00:05:32,080 --> 00:05:34,720
singing okay

149
00:05:35,120 --> 00:05:38,960
okay s equal uh

150
00:05:49,120 --> 00:05:52,560
total modulus 2

151
00:06:03,199 --> 00:06:07,120
half

152
00:06:04,720 --> 00:06:09,360
equals total

153
00:06:07,120 --> 00:06:11,520
divided by 2. let's just

154
00:06:09,360 --> 00:06:13,199
let's just substitute some we are

155
00:06:11,520 --> 00:06:15,600
looking for right we're looking for

156
00:06:13,199 --> 00:06:16,560
remember for each number we pick or skip

157
00:06:15,600 --> 00:06:18,639
right

158
00:06:16,560 --> 00:06:20,319
so now we have we want to convert at

159
00:06:18,639 --> 00:06:22,639
least the dp function into a two

160
00:06:20,319 --> 00:06:24,639
dimensional array so we have a list

161
00:06:22,639 --> 00:06:26,639
so at the beginning with each one we

162
00:06:24,639 --> 00:06:27,840
sell the pulling at the beginning with

163
00:06:26,639 --> 00:06:30,400
force

164
00:06:27,840 --> 00:06:32,840
for underscore in

165
00:06:30,400 --> 00:06:34,479
range

166
00:06:32,840 --> 00:06:35,840
so

167
00:06:34,479 --> 00:06:38,800
that would be

168
00:06:35,840 --> 00:06:40,720
half half plus one

169
00:06:38,800 --> 00:06:43,360
yeah because we're going to use the half

170
00:06:40,720 --> 00:06:44,960
half index so we need to plus one here

171
00:06:43,360 --> 00:06:45,919
and then for

172
00:06:44,960 --> 00:06:47,759
in

173
00:06:45,919 --> 00:06:49,919
range

174
00:06:47,759 --> 00:06:51,919
okay so we are missing an n equals

175
00:06:49,919 --> 00:06:55,360
length number

176
00:06:51,919 --> 00:06:58,240
that's the index and then n plus one

177
00:06:55,360 --> 00:07:01,880
so this is the two-dimensional way so we

178
00:06:58,240 --> 00:07:01,880
can use this dpi

179
00:07:02,080 --> 00:07:05,759
s so okay so

180
00:07:06,160 --> 00:07:10,400
let's just go for one version because

181
00:07:08,000 --> 00:07:12,400
the other one remember we for this i we

182
00:07:10,400 --> 00:07:15,360
can interpret in two different ways

183
00:07:12,400 --> 00:07:17,199
right so first first way is as we said

184
00:07:15,360 --> 00:07:18,479
yesterday so we are looking for the

185
00:07:17,199 --> 00:07:19,840
numbers

186
00:07:18,479 --> 00:07:21,840
from i

187
00:07:19,840 --> 00:07:24,400
to the end right

188
00:07:21,840 --> 00:07:27,199
and the second second way of

189
00:07:24,400 --> 00:07:29,759
interpreting psi will be nums

190
00:07:27,199 --> 00:07:31,280
up to i plus one right up to i right for

191
00:07:29,759 --> 00:07:33,199
the index up to i

192
00:07:31,280 --> 00:07:34,800
so we're going to going for this

193
00:07:33,199 --> 00:07:36,240
approach because this is quite similar

194
00:07:34,800 --> 00:07:37,520
okay

195
00:07:36,240 --> 00:07:39,919
so if we go

196
00:07:37,520 --> 00:07:41,120
go for this approach we are looking for

197
00:07:39,919 --> 00:07:44,000
to find

198
00:07:41,120 --> 00:07:46,800
find the subsequence in this range with

199
00:07:44,000 --> 00:07:49,360
the subset sum s at least return true or

200
00:07:46,800 --> 00:07:52,240
false right so let's then we store these

201
00:07:49,360 --> 00:07:54,000
intermediate values in here

202
00:07:52,240 --> 00:07:56,840
so at the beginning we need to do what

203
00:07:54,000 --> 00:07:58,720
for i in

204
00:07:56,840 --> 00:08:02,000
range

205
00:07:58,720 --> 00:08:03,440
range n right right n

206
00:08:02,000 --> 00:08:04,319
d p

207
00:08:03,440 --> 00:08:05,520
i

208
00:08:04,319 --> 00:08:07,520
zero

209
00:08:05,520 --> 00:08:09,919
equals

210
00:08:07,520 --> 00:08:13,319
equals one

211
00:08:09,919 --> 00:08:13,319
equals one

212
00:08:13,520 --> 00:08:18,400
i look we

213
00:08:15,520 --> 00:08:21,039
at any point can we find the subset sum

214
00:08:18,400 --> 00:08:22,000
which equals zero and

215
00:08:21,039 --> 00:08:23,919
this

216
00:08:22,000 --> 00:08:26,080
is it two of us

217
00:08:23,919 --> 00:08:27,850
can we find it

218
00:08:26,080 --> 00:08:30,720
yes two of us

219
00:08:27,850 --> 00:08:33,760
[Music]

220
00:08:30,720 --> 00:08:35,120
substitutions here yes yes because look

221
00:08:33,760 --> 00:08:37,519
0

222
00:08:35,120 --> 00:08:41,599
0 means we don't pick right we're not

223
00:08:37,519 --> 00:08:44,000
picking right so it's true

224
00:08:41,599 --> 00:08:46,000
right then we can do this for

225
00:08:44,000 --> 00:08:47,920
because look in order to calculate at

226
00:08:46,000 --> 00:08:50,959
least dpi

227
00:08:47,920 --> 00:08:51,920
then i need the value of dpi plus 1

228
00:08:50,959 --> 00:08:53,760
right

229
00:08:51,920 --> 00:08:56,160
i plus 1 right because remember at this

230
00:08:53,760 --> 00:08:58,000
point we choose to pick or not pick and

231
00:08:56,160 --> 00:09:00,240
i'm going to the next one

232
00:08:58,000 --> 00:09:02,880
so let's say if i'm going for i i need

233
00:09:00,240 --> 00:09:04,160
the dpi plus one so i need to

234
00:09:02,880 --> 00:09:05,760
iterate and

235
00:09:04,160 --> 00:09:09,200
iterate the

236
00:09:05,760 --> 00:09:11,440
the index from backwards right right

237
00:09:09,200 --> 00:09:13,760
okay this is quite tricky okay

238
00:09:11,440 --> 00:09:16,720
if we want to calculate dpi

239
00:09:13,760 --> 00:09:19,200
and that's based on dpi plus one right

240
00:09:16,720 --> 00:09:20,240
so i need to iterate the index

241
00:09:19,200 --> 00:09:22,959
from

242
00:09:20,240 --> 00:09:24,140
n backwards right

243
00:09:22,959 --> 00:09:25,360
yeah

244
00:09:24,140 --> 00:09:26,480
[Music]

245
00:09:25,360 --> 00:09:29,200
make sense

246
00:09:26,480 --> 00:09:30,320
because look because if i iterate from

247
00:09:29,200 --> 00:09:33,760
this one

248
00:09:30,320 --> 00:09:36,320
i idp one but db2 is not calculated

249
00:09:33,760 --> 00:09:39,279
right so i need to calculate iterate

250
00:09:36,320 --> 00:09:41,680
this backwards i calculate pp2 and then

251
00:09:39,279 --> 00:09:46,240
i get calculated dp1 right because 2 is

252
00:09:41,680 --> 00:09:46,240
already calculated so that would be from

253
00:09:48,839 --> 00:09:54,240
and n minus 1 minus 1 to the n

254
00:09:52,800 --> 00:09:55,680
minus 1

255
00:09:54,240 --> 00:09:56,560
and then for

256
00:09:55,680 --> 00:09:59,279
j

257
00:09:56,560 --> 00:10:00,880
in numbers

258
00:09:59,279 --> 00:10:03,760
if j

259
00:10:00,880 --> 00:10:06,320
is smaller than

260
00:10:03,760 --> 00:10:09,440
is it smaller than

261
00:10:06,320 --> 00:10:12,959
uh nums

262
00:10:09,440 --> 00:10:15,360
i or actually it should be bigger right

263
00:10:12,959 --> 00:10:18,600
and then dp

264
00:10:15,360 --> 00:10:18,600
is what

265
00:10:19,440 --> 00:10:26,399
if if it's first law if it's smaller if

266
00:10:22,640 --> 00:10:28,720
if i is smaller than dp

267
00:10:26,399 --> 00:10:33,760
dpi

268
00:10:28,720 --> 00:10:36,959
j will be equals to dpi minus one i no

269
00:10:33,760 --> 00:10:38,880
no no because look we are using dpi plus

270
00:10:36,959 --> 00:10:41,360
one here

271
00:10:38,880 --> 00:10:42,240
i plus one here and j

272
00:10:41,360 --> 00:10:44,320
right

273
00:10:42,240 --> 00:10:48,320
we're going backwards right

274
00:10:44,320 --> 00:10:50,079
if look if j is smaller than if j is

275
00:10:48,320 --> 00:10:50,880
smaller than nums i

276
00:10:50,079 --> 00:10:52,640
uh

277
00:10:50,880 --> 00:10:54,720
s

278
00:10:52,640 --> 00:10:55,600
d p i

279
00:10:54,720 --> 00:10:58,750
j

280
00:10:55,600 --> 00:11:00,320
equals d p i

281
00:10:58,750 --> 00:11:03,120
[Music]

282
00:11:00,320 --> 00:11:03,120
past one

283
00:11:04,800 --> 00:11:07,040
uh

284
00:11:09,440 --> 00:11:15,839
okay so let's start in detail

285
00:11:12,839 --> 00:11:18,320
okay no no no this is not number so this

286
00:11:15,839 --> 00:11:20,320
is half okay we are we are we need to go

287
00:11:18,320 --> 00:11:21,920
through the half okay this is the

288
00:11:20,320 --> 00:11:24,720
from half

289
00:11:21,920 --> 00:11:27,440
up to minus one to zero minus one okay

290
00:11:24,720 --> 00:11:29,519
that's the mistake because the second

291
00:11:27,440 --> 00:11:31,760
the first iteration would be going

292
00:11:29,519 --> 00:11:33,360
through the index they are going to like

293
00:11:31,760 --> 00:11:36,160
that the second iteration of going

294
00:11:33,360 --> 00:11:38,560
through the subset sum okay such as sum

295
00:11:36,160 --> 00:11:41,360
so j will be something if the subset sum

296
00:11:38,560 --> 00:11:43,440
is smaller than the left then then we

297
00:11:41,360 --> 00:11:45,040
can't pick any numbers right because

298
00:11:43,440 --> 00:11:48,000
this one is smaller if it's bigger then

299
00:11:45,040 --> 00:11:48,000
we can take to this

300
00:11:49,040 --> 00:11:53,600
num is i

301
00:11:51,680 --> 00:11:56,560
okay

302
00:11:53,600 --> 00:11:56,560
and then we turn

303
00:12:00,480 --> 00:12:03,600
remember at the beginning we're talking

304
00:12:02,079 --> 00:12:05,680
about uh

305
00:12:03,600 --> 00:12:06,480
yellow and then what sum are we looking

306
00:12:05,680 --> 00:12:08,880
for

307
00:12:06,480 --> 00:12:11,279
what time are we looking for

308
00:12:08,880 --> 00:12:13,760
we start from zero what somehow

309
00:12:11,279 --> 00:12:16,240
half yeah we're done half

310
00:12:13,760 --> 00:12:17,839
okay let's double check because look

311
00:12:16,240 --> 00:12:20,079
this is a

312
00:12:17,839 --> 00:12:22,959
there are more details here right

313
00:12:20,079 --> 00:12:25,200
especially the index right and it's it

314
00:12:22,959 --> 00:12:27,120
might be easier to use the top-down

315
00:12:25,200 --> 00:12:29,360
dynamic programming because we can let

316
00:12:27,120 --> 00:12:32,800
the computer handle it in the location

317
00:12:29,360 --> 00:12:32,800
right what you're doing ryan

318
00:12:36,160 --> 00:12:39,839
okay

319
00:12:37,279 --> 00:12:39,839
uh

320
00:12:40,320 --> 00:12:47,040
let me double check okay let me just

321
00:12:42,720 --> 00:12:50,880
double check if j is smaller than arms

322
00:12:47,040 --> 00:12:52,420
if j smaller than okay

323
00:12:50,880 --> 00:12:55,990
dpi

324
00:12:52,420 --> 00:12:55,990
[Music]

325
00:13:00,000 --> 00:13:02,320
sorry

326
00:13:00,800 --> 00:13:04,160
nothing

327
00:13:02,320 --> 00:13:06,639
okay so there's one missing

328
00:13:04,160 --> 00:13:09,279
look this one is to

329
00:13:06,639 --> 00:13:12,000
because we we haven't got enough

330
00:13:09,279 --> 00:13:13,440
in this integer this number is bigger

331
00:13:12,000 --> 00:13:15,440
than the sum right

332
00:13:13,440 --> 00:13:17,519
now we can't pick it obviously then we

333
00:13:15,440 --> 00:13:18,480
will start from the next one and this

334
00:13:17,519 --> 00:13:20,720
one

335
00:13:18,480 --> 00:13:22,639
while we we can't have the ticket so we

336
00:13:20,720 --> 00:13:24,880
can pick on our pick right so we can

337
00:13:22,639 --> 00:13:26,639
have this dpi plus one

338
00:13:24,880 --> 00:13:27,760
not pick

339
00:13:26,639 --> 00:13:30,320
or

340
00:13:27,760 --> 00:13:32,399
we pick it right so this is pick or not

341
00:13:30,320 --> 00:13:35,760
pick so there's one missing here

342
00:13:32,399 --> 00:13:38,000
and then we we because at i we need to

343
00:13:35,760 --> 00:13:40,240
retrieve the value for i plus one so we

344
00:13:38,000 --> 00:13:42,320
need to here we need to put the i minus

345
00:13:40,240 --> 00:13:43,360
n minus two okay the second to the last

346
00:13:42,320 --> 00:13:44,800
value

347
00:13:43,360 --> 00:13:48,639
okay

348
00:13:44,800 --> 00:13:51,120
and now we start from the sec vp 0 is to

349
00:13:48,639 --> 00:13:54,079
get to the first

350
00:13:51,120 --> 00:13:56,720
db 0 at half is that

351
00:13:54,079 --> 00:14:01,120
we're checking that can we make the

352
00:13:56,720 --> 00:14:01,120
half from the first element onwards okay

353
00:14:05,920 --> 00:14:08,160
okay

354
00:14:10,079 --> 00:14:14,399
yeah i think i think that

355
00:14:12,639 --> 00:14:16,959
that's correct

356
00:14:14,399 --> 00:14:20,320
let's should be correct

357
00:14:16,959 --> 00:14:21,199
okay no no no no yeah no yeah

358
00:14:20,320 --> 00:14:22,079
okay

359
00:14:21,199 --> 00:14:22,880
look

360
00:14:22,079 --> 00:14:26,399
look

361
00:14:22,880 --> 00:14:28,800
we we are calculating the dpij and then

362
00:14:26,399 --> 00:14:31,360
based on dpi plus one look look this is

363
00:14:28,800 --> 00:14:33,440
quite tricky okay it's based on dpi plus

364
00:14:31,360 --> 00:14:36,320
one only right yeah

365
00:14:33,440 --> 00:14:37,120
so we can save these

366
00:14:36,320 --> 00:14:39,519
same

367
00:14:37,120 --> 00:14:41,120
space right instead of two dimensional

368
00:14:39,519 --> 00:14:43,120
we can only we can use the one

369
00:14:41,120 --> 00:14:45,199
dimensional okay we can use one

370
00:14:43,120 --> 00:14:48,320
dimension because in order to when we

371
00:14:45,199 --> 00:14:50,240
calculate dpi we only need the dpi plus

372
00:14:48,320 --> 00:14:52,320
one value

373
00:14:50,240 --> 00:14:54,800
right

374
00:14:52,320 --> 00:14:56,800
okay so how can we save it

375
00:14:54,800 --> 00:15:00,560
so let's say save it let me just write

376
00:14:56,800 --> 00:15:03,199
it here okay let me just write it here

377
00:15:00,560 --> 00:15:05,360
so instead of two dimensional i need a

378
00:15:03,199 --> 00:15:07,519
one dimensional and then

379
00:15:05,360 --> 00:15:10,880
one dimension that will be

380
00:15:07,519 --> 00:15:12,560
at the beginning will be fourth

381
00:15:10,880 --> 00:15:14,000
for

382
00:15:12,560 --> 00:15:15,600
in

383
00:15:14,000 --> 00:15:18,000
what what's that

384
00:15:15,600 --> 00:15:18,000
range

385
00:15:18,079 --> 00:15:23,120
half half plus one okay

386
00:15:20,320 --> 00:15:25,600
so instead of

387
00:15:23,120 --> 00:15:27,360
instead of two dimensional way we we use

388
00:15:25,600 --> 00:15:30,800
the one-dimensional way

389
00:15:27,360 --> 00:15:30,800
and then we just do this for

390
00:15:31,120 --> 00:15:33,199
i

391
00:15:32,160 --> 00:15:35,519
in

392
00:15:33,199 --> 00:15:37,759
range this is the same yeah for i in

393
00:15:35,519 --> 00:15:39,360
regular

394
00:15:37,759 --> 00:15:42,399
for under

395
00:15:39,360 --> 00:15:44,399
so let's go through the numbers for j in

396
00:15:42,399 --> 00:15:45,440
numbers we're going through the numbers

397
00:15:44,399 --> 00:15:48,079
and then

398
00:15:45,440 --> 00:15:49,199
for i in

399
00:15:48,079 --> 00:15:51,759
range

400
00:15:49,199 --> 00:15:53,600
we start from half

401
00:15:51,759 --> 00:15:55,199
and then

402
00:15:53,600 --> 00:15:57,199
as

403
00:15:55,199 --> 00:15:59,600
yellow

404
00:15:57,199 --> 00:16:02,000
minus one minus one right

405
00:15:59,600 --> 00:16:04,720
yeah we started yeah

406
00:16:02,000 --> 00:16:04,720
and then what

407
00:16:04,880 --> 00:16:08,399
uh

408
00:16:07,040 --> 00:16:11,600
if

409
00:16:08,399 --> 00:16:14,079
if j the number is smaller is

410
00:16:11,600 --> 00:16:16,959
is smaller than this half the sum right

411
00:16:14,079 --> 00:16:19,040
smaller than sum now we do this

412
00:16:16,959 --> 00:16:21,440
dp

413
00:16:19,040 --> 00:16:23,920
i because we're calculating this dpi

414
00:16:21,440 --> 00:16:26,079
equals dpi

415
00:16:23,920 --> 00:16:28,800
or dp

416
00:16:26,079 --> 00:16:30,399
i minus j right and then we just can do

417
00:16:28,800 --> 00:16:35,880
this we tan

418
00:16:30,399 --> 00:16:35,880
vp half okay vp half

419
00:16:36,720 --> 00:16:40,480
yeah

420
00:16:37,920 --> 00:16:42,399
is it one dimensional array

421
00:16:40,480 --> 00:16:44,959
and we're going through this each number

422
00:16:42,399 --> 00:16:46,959
look for j in numbers this is actually

423
00:16:44,959 --> 00:16:49,759
corresponds to the first loop which we

424
00:16:46,959 --> 00:16:52,720
are iterating over the index the numbers

425
00:16:49,759 --> 00:16:54,399
the second loop the inner loop is always

426
00:16:52,720 --> 00:16:57,120
going through the

427
00:16:54,399 --> 00:17:00,320
subset sum okay and then if if the

428
00:16:57,120 --> 00:17:02,639
number is smaller than the subset sum

429
00:17:00,320 --> 00:17:05,280
uh small i will say smaller or equal

430
00:17:02,639 --> 00:17:07,799
okay smaller than equal yeah

431
00:17:05,280 --> 00:17:10,720
p and the first number dp0 let's say

432
00:17:07,799 --> 00:17:15,280
dp0b needs to be true okay this is one

433
00:17:10,720 --> 00:17:18,880
thing missing dvi will be dpi or dpi

434
00:17:15,280 --> 00:17:21,600
minus j j is the numbers okay yeah

435
00:17:18,880 --> 00:17:23,600
yeah and then dp half look this way we

436
00:17:21,600 --> 00:17:25,199
are saving the term complexity is still

437
00:17:23,600 --> 00:17:27,760
the same right because we have two loops

438
00:17:25,199 --> 00:17:29,280
right we have two loops the first row as

439
00:17:27,760 --> 00:17:31,919
i said going through the numbers if

440
00:17:29,280 --> 00:17:34,240
there are n numbers the second loop

441
00:17:31,919 --> 00:17:35,840
we're going to the subset sum which is

442
00:17:34,240 --> 00:17:38,000
half okay s

443
00:17:35,840 --> 00:17:40,400
the time capacity will be o and s but

444
00:17:38,000 --> 00:17:43,280
the space convexity here

445
00:17:40,400 --> 00:17:46,240
is os and the previous one

446
00:17:43,280 --> 00:17:48,530
previous one is o n times s okay which

447
00:17:46,240 --> 00:17:51,660
is better

448
00:17:48,530 --> 00:17:51,660
[Music]

449
00:17:52,000 --> 00:17:54,880
this one is better yeah yeah because

450
00:17:53,760 --> 00:17:59,200
look we

451
00:17:54,880 --> 00:17:59,679
instead of o and s space we are using

452
00:17:59,200 --> 00:18:01,760
is os

453
00:17:59,679 --> 00:18:03,280
the time convexity is the same okay if

454
00:18:01,760 --> 00:18:05,200
two algorithm

455
00:18:03,280 --> 00:18:06,640
they perform the same thing but which

456
00:18:05,200 --> 00:18:08,960
one use the

457
00:18:06,640 --> 00:18:11,440
one of them use the less memory

458
00:18:08,960 --> 00:18:13,280
is that one a better one

459
00:18:11,440 --> 00:18:15,120
not really sorry what do you mean not

460
00:18:13,280 --> 00:18:17,280
really if there are two come on listen

461
00:18:15,120 --> 00:18:19,360
to me these two backgrounds right yes

462
00:18:17,280 --> 00:18:21,679
they have the time complexity both is on

463
00:18:19,360 --> 00:18:23,919
s but this one use the ons space this

464
00:18:21,679 --> 00:18:26,240
one use the os space which one is bigger

465
00:18:23,919 --> 00:18:26,240
better

466
00:18:27,360 --> 00:18:32,640
come on i just said which the one used

467
00:18:30,000 --> 00:18:35,039
the less memory is better right right

468
00:18:32,640 --> 00:18:38,480
yeah so this is the map does it make

469
00:18:35,039 --> 00:18:41,520
sense look if two things run

470
00:18:38,480 --> 00:18:43,360
run particularly them for some time

471
00:18:41,520 --> 00:18:44,320
yeah all right

472
00:18:43,360 --> 00:18:47,760
yeah

473
00:18:44,320 --> 00:18:49,840
if both algorithms run at the same time

474
00:18:47,760 --> 00:18:53,120
some complexity but one of them use less

475
00:18:49,840 --> 00:18:53,919
memory obviously is better right yeah if

476
00:18:53,120 --> 00:18:55,919
both

477
00:18:53,919 --> 00:18:58,559
both aggregate use the same space but

478
00:18:55,919 --> 00:19:01,120
one of them use the is faster which one

479
00:18:58,559 --> 00:19:02,960
is better the one which is faster yeah

480
00:19:01,120 --> 00:19:05,360
of course this is easy to compare but

481
00:19:02,960 --> 00:19:07,760
how about however sometimes in reality

482
00:19:05,360 --> 00:19:08,960
reality it's not always like that it's

483
00:19:07,760 --> 00:19:12,080
like okay

484
00:19:08,960 --> 00:19:14,960
you can okay it's like this it's like

485
00:19:12,080 --> 00:19:17,840
okay you have uh

486
00:19:14,960 --> 00:19:20,160
uh this is time this is uh space okay

487
00:19:17,840 --> 00:19:22,720
one the first argument yeah

488
00:19:20,160 --> 00:19:25,679
maybe o and time and then you need to o

489
00:19:22,720 --> 00:19:28,960
n space all right but the second second

490
00:19:25,679 --> 00:19:31,520
approach is o n square time but you need

491
00:19:28,960 --> 00:19:32,880
a one space so do you think which one is

492
00:19:31,520 --> 00:19:35,200
better

493
00:19:32,880 --> 00:19:35,200
you see

494
00:19:36,400 --> 00:19:41,440
the first agreement the time is based

495
00:19:38,880 --> 00:19:44,720
complexities o n the second

496
00:19:41,440 --> 00:19:46,400
argument the time compresses o n square

497
00:19:44,720 --> 00:19:48,720
quadratic and the space is always

498
00:19:46,400 --> 00:19:52,400
constant calculated we also call it the

499
00:19:48,720 --> 00:19:55,760
time polynomial time okay polynomial

500
00:19:52,400 --> 00:19:55,760
so do you think which one is better

501
00:19:57,440 --> 00:20:02,320
this one but this one is more more space

502
00:20:00,240 --> 00:20:05,440
than that it's faster than this but it's

503
00:20:02,320 --> 00:20:07,679
use more space you see

504
00:20:05,440 --> 00:20:09,280
do you see the problem is that i know

505
00:20:07,679 --> 00:20:12,000
there's always a trade-off yeah

506
00:20:09,280 --> 00:20:13,280
trade-off you trade the space for the

507
00:20:12,000 --> 00:20:17,120
speed

508
00:20:13,280 --> 00:20:19,520
right this one is slow but it use less

509
00:20:17,120 --> 00:20:21,760
space okay so there's no right or wrong

510
00:20:19,520 --> 00:20:24,559
answer here right there's no right or

511
00:20:21,760 --> 00:20:26,400
wrong but if i say okay this is also all

512
00:20:24,559 --> 00:20:27,280
in time oh and space so which one is

513
00:20:26,400 --> 00:20:28,720
better

514
00:20:27,280 --> 00:20:31,760
oh obviously

515
00:20:28,720 --> 00:20:37,720
yeah yeah you see one of them yeah yeah

516
00:20:31,760 --> 00:20:37,720
okay that's it for today bye bye bye bye

