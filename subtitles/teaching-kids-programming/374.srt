1
00:00:14,960 --> 00:00:19,840
anybody so what's the problem about the

2
00:00:17,359 --> 00:00:22,720
problem hey there are

3
00:00:19,840 --> 00:00:24,720
you know you have a bag i have a bag a

4
00:00:22,720 --> 00:00:27,519
knapsack yeah that's good with the

5
00:00:24,720 --> 00:00:28,720
capacity see yeah maximum commercial

6
00:00:27,519 --> 00:00:32,320
weight

7
00:00:28,720 --> 00:00:34,160
item a few items a few a few data items

8
00:00:32,320 --> 00:00:35,440
yeah this is each one

9
00:00:34,160 --> 00:00:37,120
in your bag

10
00:00:35,440 --> 00:00:38,800
wait and then we have a value and you

11
00:00:37,120 --> 00:00:40,079
fit it in your bag i know what's the

12
00:00:38,800 --> 00:00:42,320
objective

13
00:00:40,079 --> 00:00:42,320
what's

14
00:00:43,280 --> 00:00:43,399
you up

15
00:00:45,120 --> 00:00:51,120
you have a maximum maximum weight

16
00:00:48,239 --> 00:00:53,199
yeah yeah okay so yeah to sum up we have

17
00:00:51,120 --> 00:00:55,199
a few items and we want to put it in an

18
00:00:53,199 --> 00:00:57,600
app cell with the capacity c and we want

19
00:00:55,199 --> 00:00:59,359
to maximize the values they have values

20
00:00:57,600 --> 00:01:01,280
each one has the value point number like

21
00:00:59,359 --> 00:01:04,239
the value one

22
00:01:01,280 --> 00:01:07,520
five three and the weights could be

23
00:01:04,239 --> 00:01:10,080
something like one two three okay

24
00:01:07,520 --> 00:01:12,400
and then the capacity to be

25
00:01:10,080 --> 00:01:13,680
of the next step is five so what's the

26
00:01:12,400 --> 00:01:15,439
optimum

27
00:01:13,680 --> 00:01:18,560
solution if we want to

28
00:01:15,439 --> 00:01:19,600
pick put the two put items in the back

29
00:01:18,560 --> 00:01:21,920
right

30
00:01:19,600 --> 00:01:24,880
three five and three three

31
00:01:21,920 --> 00:01:27,920
so which two items you

32
00:01:24,880 --> 00:01:29,200
would you like to take

33
00:01:27,920 --> 00:01:31,119
one

34
00:01:29,200 --> 00:01:33,119
yeah okay two plus three that's not

35
00:01:31,119 --> 00:01:35,600
equal than five that's all you're gonna

36
00:01:33,119 --> 00:01:37,119
find and then the values we attempt is

37
00:01:35,600 --> 00:01:40,320
five plus three okay so let's be

38
00:01:37,119 --> 00:01:42,560
objective that's the problem and if we

39
00:01:40,320 --> 00:01:44,159
if we we can describe we can describe

40
00:01:42,560 --> 00:01:45,600
the problem using the mathematics

41
00:01:44,159 --> 00:01:48,799
remember yeah

42
00:01:45,600 --> 00:01:51,840
so let me just repeat again okay just uh

43
00:01:48,799 --> 00:01:55,840
so we have the v which stands for values

44
00:01:51,840 --> 00:01:57,920
it's an array vi yeah vi is the values

45
00:01:55,840 --> 00:02:01,759
and then we have uh

46
00:01:57,920 --> 00:02:04,079
wi is the weight and we have a c which

47
00:02:01,759 --> 00:02:07,200
is the capacity maximum capacity of the

48
00:02:04,079 --> 00:02:08,720
knob set and we have the pi which is

49
00:02:07,200 --> 00:02:11,599
stands for

50
00:02:08,720 --> 00:02:13,920
wow stencil for the if we want to pick

51
00:02:11,599 --> 00:02:15,440
it yeah decide to pick it so it belongs

52
00:02:13,920 --> 00:02:17,680
to

53
00:02:15,440 --> 00:02:19,760
it only has two values zero and one

54
00:02:17,680 --> 00:02:22,480
right zero and one zero means that we

55
00:02:19,760 --> 00:02:24,560
don't pick it the item is item we don't

56
00:02:22,480 --> 00:02:27,360
pick it and one means that we pick it

57
00:02:24,560 --> 00:02:30,080
so we want to maximize maximize yeah

58
00:02:27,360 --> 00:02:31,840
maximize let's say maximize what

59
00:02:30,080 --> 00:02:35,840
p i

60
00:02:31,840 --> 00:02:36,879
okay sum of these sum of p i times v i

61
00:02:35,840 --> 00:02:39,680
right

62
00:02:36,879 --> 00:02:42,560
we also maximize the total value we put

63
00:02:39,680 --> 00:02:45,440
on the next step but

64
00:02:42,560 --> 00:02:49,280
we also we want to make sure that the

65
00:02:45,440 --> 00:02:50,400
sum of the p i times w line

66
00:02:49,280 --> 00:02:53,280
the weight

67
00:02:50,400 --> 00:02:56,160
is less order equal than c right

68
00:02:53,280 --> 00:02:57,840
okay and then look p i is zero and one

69
00:02:56,160 --> 00:02:59,920
okay so that's the mathematic problem

70
00:02:57,840 --> 00:03:02,159
that's we call it zero point two one

71
00:02:59,920 --> 00:03:05,280
knapsack zero one what's the other one

72
00:03:02,159 --> 00:03:07,599
zl1 is comes from here look it only has

73
00:03:05,280 --> 00:03:08,879
two values p only has two values zero

74
00:03:07,599 --> 00:03:11,120
and one okay

75
00:03:08,879 --> 00:03:12,560
yeah and we talked about what

76
00:03:11,120 --> 00:03:17,159
they we talked about what kind of

77
00:03:12,560 --> 00:03:17,159
solution uh have we talked about

78
00:03:18,239 --> 00:03:22,000
well what have we talked about talk

79
00:03:19,920 --> 00:03:24,400
about the solutions

80
00:03:22,000 --> 00:03:26,050
um dynamic programming

81
00:03:24,400 --> 00:03:29,129
humanization

82
00:03:26,050 --> 00:03:29,129
[Music]

83
00:03:29,840 --> 00:03:32,319
top down

84
00:03:35,150 --> 00:03:38,240
[Music]

85
00:03:39,519 --> 00:03:44,959
and the bu is that we stole the values

86
00:03:42,239 --> 00:03:46,879
in the dp array of nfdp array

87
00:03:44,959 --> 00:03:49,680
okay we're done

88
00:03:46,879 --> 00:03:51,680
okay so let's review let's just quickly

89
00:03:49,680 --> 00:03:54,400
implement it okay

90
00:03:51,680 --> 00:03:57,439
shout out if if you remember yeah let's

91
00:03:54,400 --> 00:03:58,959
let's implement the top down first okay

92
00:03:57,439 --> 00:04:00,560
dfs

93
00:03:58,959 --> 00:04:03,360
we are putting the we are currently

94
00:04:00,560 --> 00:04:04,400
putting the ice item with the capacity c

95
00:04:03,360 --> 00:04:05,439
right

96
00:04:04,400 --> 00:04:08,959
if

97
00:04:05,439 --> 00:04:10,879
i is smaller than zero means that we

98
00:04:08,959 --> 00:04:12,720
we return

99
00:04:10,879 --> 00:04:14,640
return one

100
00:04:12,720 --> 00:04:16,639
if we're running out of items the

101
00:04:14,640 --> 00:04:19,280
previous item would return zero right

102
00:04:16,639 --> 00:04:20,479
yeah so for each item we how many choice

103
00:04:19,280 --> 00:04:22,479
do we have

104
00:04:20,479 --> 00:04:23,919
how many choices how many i how many

105
00:04:22,479 --> 00:04:28,040
choice do we

106
00:04:23,919 --> 00:04:28,040
have two what are those

107
00:04:31,600 --> 00:04:37,120
obviously there's one condition is that

108
00:04:33,600 --> 00:04:39,360
if the current if the capacity yeah

109
00:04:37,120 --> 00:04:42,160
is how about if look if the item is too

110
00:04:39,360 --> 00:04:44,639
heavy then we can't pick it right yeah

111
00:04:42,160 --> 00:04:46,720
okay so that we have this answer at the

112
00:04:44,639 --> 00:04:48,320
beginning this is the maximum value we

113
00:04:46,720 --> 00:04:51,040
can put

114
00:04:48,320 --> 00:04:54,720
when we're considering the item okay so

115
00:04:51,040 --> 00:04:57,199
if c is bigger than bigger or equal than

116
00:04:54,720 --> 00:05:00,160
the values the weight

117
00:04:57,199 --> 00:05:03,600
weight of the item common item now we

118
00:05:00,160 --> 00:05:05,280
can pick it right everyone come on

119
00:05:03,600 --> 00:05:08,400
we can pick it which is

120
00:05:05,280 --> 00:05:10,160
answer equals max

121
00:05:08,400 --> 00:05:12,720
answer okay actually we don't need to

122
00:05:10,160 --> 00:05:14,880
put the max here because it's zero so

123
00:05:12,720 --> 00:05:16,400
answer equals one

124
00:05:14,880 --> 00:05:18,720
b f s

125
00:05:16,400 --> 00:05:20,240
i minus one the previous item but we

126
00:05:18,720 --> 00:05:22,880
pick it

127
00:05:20,240 --> 00:05:25,280
we pick it and we not pick it pick it

128
00:05:22,880 --> 00:05:28,720
what happened to c if we pick it plus

129
00:05:25,280 --> 00:05:30,080
rock tom see what what happened

130
00:05:28,720 --> 00:05:35,240
what happens

131
00:05:30,080 --> 00:05:35,240
c the capacity what is it plus capacity

132
00:05:36,000 --> 00:05:41,440
because you need to add it

133
00:05:39,280 --> 00:05:43,199
this is the remaining capacity if we

134
00:05:41,440 --> 00:05:44,000
pick the current weight what happened to

135
00:05:43,199 --> 00:05:46,240
c

136
00:05:44,000 --> 00:05:49,840
is minus 1

137
00:05:46,240 --> 00:05:49,840
minus this way yeah wait

138
00:05:50,240 --> 00:05:55,919
okay but if we pick it we can

139
00:05:53,120 --> 00:05:57,199
attend the value yeah values i right

140
00:05:55,919 --> 00:05:59,840
yeah

141
00:05:57,199 --> 00:06:02,560
okay and then this will be the case of

142
00:05:59,840 --> 00:06:04,639
not picking it right not picking it

143
00:06:02,560 --> 00:06:05,680
no picking what happened what happened

144
00:06:04,639 --> 00:06:08,160
with the

145
00:06:05,680 --> 00:06:10,000
what's the second parameters

146
00:06:08,160 --> 00:06:12,160
if we don't pick it what happened with

147
00:06:10,000 --> 00:06:13,360
the c do we need to change

148
00:06:12,160 --> 00:06:14,479
this yeah

149
00:06:13,360 --> 00:06:17,759
and every time

150
00:06:14,479 --> 00:06:17,759
this is the top down okay

151
00:06:17,840 --> 00:06:22,880
what what's missing here come on

152
00:06:21,120 --> 00:06:25,199
what happens if we don't put the cat it

153
00:06:22,880 --> 00:06:27,360
actually moves what what happens if we

154
00:06:25,199 --> 00:06:29,520
don't put a test train explanation

155
00:06:27,360 --> 00:06:32,000
why because you have to keep on doing

156
00:06:29,520 --> 00:06:34,080
the same thing again

157
00:06:32,000 --> 00:06:35,759
you can't remember it with your smooth

158
00:06:34,080 --> 00:06:38,400
dumb brain

159
00:06:35,759 --> 00:06:40,400
okay okay so yeah we put the cash to

160
00:06:38,400 --> 00:06:42,639
last computer to remember the values for

161
00:06:40,400 --> 00:06:45,039
us yeah remember if we cut

162
00:06:42,639 --> 00:06:47,840
look just imagine if we put if we call

163
00:06:45,039 --> 00:06:49,520
these like 100 like a hundred two

164
00:06:47,840 --> 00:06:51,520
hundred i have a c equals four hundred

165
00:06:49,520 --> 00:06:54,880
and then you would call the previous

166
00:06:51,520 --> 00:06:56,319
value dftfs i minus one uh

167
00:06:54,880 --> 00:06:58,960
99

168
00:06:56,319 --> 00:07:00,720
yeah 200 and then these could be

169
00:06:58,960 --> 00:07:03,599
something smaller with a smaller value

170
00:07:00,720 --> 00:07:06,240
right but sometimes this value dfs ic

171
00:07:03,599 --> 00:07:08,720
could be used multiple times and that's

172
00:07:06,240 --> 00:07:11,039
why we need to remember it once we have

173
00:07:08,720 --> 00:07:13,440
the value so the next time

174
00:07:11,039 --> 00:07:15,360
we want this value we just just use it

175
00:07:13,440 --> 00:07:17,759
yeah just like looking at the values in

176
00:07:15,360 --> 00:07:19,360
the dictionary in the notebook

177
00:07:17,759 --> 00:07:21,280
okay

178
00:07:19,360 --> 00:07:23,199
so with the bottom up we store the

179
00:07:21,280 --> 00:07:25,759
values yeah

180
00:07:23,199 --> 00:07:28,800
we have this table look basically we

181
00:07:25,759 --> 00:07:30,880
have a this table with an i and a c

182
00:07:28,800 --> 00:07:32,080
capacity yeah this is a two dimensional

183
00:07:30,880 --> 00:07:35,400
table

184
00:07:32,080 --> 00:07:39,120
i equals zero first item two yeah

185
00:07:35,400 --> 00:07:40,720
etcetera and m minus one yeah we we have

186
00:07:39,120 --> 00:07:43,599
m items

187
00:07:40,720 --> 00:07:47,759
index zero for n minus one the capacity

188
00:07:43,599 --> 00:07:50,080
zero one two three assessor tlc

189
00:07:47,759 --> 00:07:52,080
so we are feeling we we want to feel the

190
00:07:50,080 --> 00:07:54,160
taper right we wanna feel the table and

191
00:07:52,080 --> 00:07:56,720
the top down the enemy program yeah we

192
00:07:54,160 --> 00:07:58,879
just ask computer to give us the right

193
00:07:56,720 --> 00:08:01,759
the bottom right value right and then

194
00:07:58,879 --> 00:08:03,840
what computer does is that okay you will

195
00:08:01,759 --> 00:08:05,440
work out the the previous one the i

196
00:08:03,840 --> 00:08:07,360
minus one variance here somewhere

197
00:08:05,440 --> 00:08:09,919
somewhere you probably need this very

198
00:08:07,360 --> 00:08:11,759
decent value this value and again in

199
00:08:09,919 --> 00:08:12,639
order to calculate this value it needs

200
00:08:11,759 --> 00:08:14,800
to

201
00:08:12,639 --> 00:08:17,520
reference the previous value right here

202
00:08:14,800 --> 00:08:19,919
here here here right great this is top

203
00:08:17,520 --> 00:08:21,520
down okay here is top okay this just

204
00:08:19,919 --> 00:08:24,960
imagination this is top this is the

205
00:08:21,520 --> 00:08:27,599
bottom okay this is the opposite okay

206
00:08:24,960 --> 00:08:29,919
top down okay top down all right butter

207
00:08:27,599 --> 00:08:32,399
up right bottom

208
00:08:29,919 --> 00:08:34,800
top now because top top look

209
00:08:32,399 --> 00:08:37,039
cut that at least we are given this eye

210
00:08:34,800 --> 00:08:39,519
like a hundred two hundred right right

211
00:08:37,039 --> 00:08:42,880
we want to assess this value so look if

212
00:08:39,519 --> 00:08:44,880
if this is the tree right 100 200 here

213
00:08:42,880 --> 00:08:47,040
and then you need to be able to

214
00:08:44,880 --> 00:08:48,640
calculate the value based on 99

215
00:08:47,040 --> 00:08:51,920
something yeah

216
00:08:48,640 --> 00:08:53,680
a few values yeah look a few values if

217
00:08:51,920 --> 00:08:56,240
you explain the trick let's talk down

218
00:08:53,680 --> 00:08:58,000
right down i bought it out in calculus

219
00:08:56,240 --> 00:08:59,920
from the bottom of that so from the

220
00:08:58,000 --> 00:09:03,040
first row right now

221
00:08:59,920 --> 00:09:05,279
so so we talked about the top bottom up

222
00:09:03,040 --> 00:09:07,600
we have stored the values in the two

223
00:09:05,279 --> 00:09:09,120
dimensional array right vp

224
00:09:07,600 --> 00:09:11,279
so basically look this is a two

225
00:09:09,120 --> 00:09:14,080
dimensional i and c so we store this

226
00:09:11,279 --> 00:09:14,959
value in dpi and c right

227
00:09:14,080 --> 00:09:17,360
yeah

228
00:09:14,959 --> 00:09:20,320
okay so for the first number let me just

229
00:09:17,360 --> 00:09:22,640
implement this okay so for the first row

230
00:09:20,320 --> 00:09:24,720
yeah we store the values and then we use

231
00:09:22,640 --> 00:09:26,399
the first row to compute the second row

232
00:09:24,720 --> 00:09:28,640
you use the second row to compute the

233
00:09:26,399 --> 00:09:31,360
zero row and etcetera until we get the

234
00:09:28,640 --> 00:09:34,560
last row right well ideally you just

235
00:09:31,360 --> 00:09:37,120
want the value out here dp n minus one i

236
00:09:34,560 --> 00:09:40,000
will be n minus one and then c will be

237
00:09:37,120 --> 00:09:42,240
capacity like capacity

238
00:09:40,000 --> 00:09:43,440
can i have your attention please okay

239
00:09:42,240 --> 00:09:44,720
guys

240
00:09:43,440 --> 00:09:46,560
guys

241
00:09:44,720 --> 00:09:48,320
okay

242
00:09:46,560 --> 00:09:49,519
so what's the problem here what's the

243
00:09:48,320 --> 00:09:52,560
problem here

244
00:09:49,519 --> 00:09:54,880
what's the problem here come on look

245
00:09:52,560 --> 00:09:56,560
let me just explain again i i calculate

246
00:09:54,880 --> 00:09:58,240
we can kill the first row and then we

247
00:09:56,560 --> 00:10:00,000
use the first row to compute the second

248
00:09:58,240 --> 00:10:02,399
row we use the second row to compute the

249
00:10:00,000 --> 00:10:03,980
third row what's the what's the problem

250
00:10:02,399 --> 00:10:06,079
here

251
00:10:03,980 --> 00:10:07,200
[Music]

252
00:10:06,079 --> 00:10:09,360
so

253
00:10:07,200 --> 00:10:11,760
first question do i need to keep all the

254
00:10:09,360 --> 00:10:14,079
values in two-dimensional

255
00:10:11,760 --> 00:10:16,480
why is that good

256
00:10:14,079 --> 00:10:19,040
because that's the good direction why do

257
00:10:16,480 --> 00:10:22,160
we why we don't need to keep all the

258
00:10:19,040 --> 00:10:24,959
table because we will remember

259
00:10:22,160 --> 00:10:27,760
look because look here

260
00:10:24,959 --> 00:10:30,640
when i calculate dpi c

261
00:10:27,760 --> 00:10:32,959
i just need the value of dpi minus 1

262
00:10:30,640 --> 00:10:35,519
right nothing else yeah

263
00:10:32,959 --> 00:10:37,279
so look in the bottom up right in the

264
00:10:35,519 --> 00:10:39,680
bottom

265
00:10:37,279 --> 00:10:42,079
in the bottom i calculate i feel the

266
00:10:39,680 --> 00:10:44,880
first row right i feel the first row and

267
00:10:42,079 --> 00:10:45,600
then i hear the second row so so how can

268
00:10:44,880 --> 00:10:48,160
i

269
00:10:45,600 --> 00:10:50,560
how how do we calculate the values right

270
00:10:48,160 --> 00:10:53,040
fill in the table

271
00:10:50,560 --> 00:10:54,959
minus one yeah yeah look we we start

272
00:10:53,040 --> 00:10:57,760
filling the rows row by row yeah first

273
00:10:54,959 --> 00:11:00,000
row second row zero and then for each

274
00:10:57,760 --> 00:11:02,959
row we fill in the values from left to

275
00:11:00,000 --> 00:11:04,880
the right so basically it's butter up

276
00:11:02,959 --> 00:11:09,040
left to the right okay

277
00:11:04,880 --> 00:11:11,120
okay so now uh so we we only need

278
00:11:09,040 --> 00:11:14,079
required value for the previous load so

279
00:11:11,120 --> 00:11:16,079
we can compress the space right all

280
00:11:14,079 --> 00:11:18,959
right so instead of

281
00:11:16,079 --> 00:11:22,240
instead of declare the dpic the

282
00:11:18,959 --> 00:11:24,640
two-dimensional array we just need

283
00:11:22,240 --> 00:11:26,880
which dimension do we need to keep dpi

284
00:11:24,640 --> 00:11:29,120
or dbc which dimension

285
00:11:26,880 --> 00:11:29,120
which

286
00:11:30,480 --> 00:11:33,920
which dimension come on

287
00:11:32,240 --> 00:11:36,320
i just need a previous though so i need

288
00:11:33,920 --> 00:11:38,160
to declare which which dimension tpc or

289
00:11:36,320 --> 00:11:39,920
dpi come on

290
00:11:38,160 --> 00:11:42,399
why is dpi

291
00:11:39,920 --> 00:11:44,640
ppc yeah look because this is raw i just

292
00:11:42,399 --> 00:11:48,320
need these yeah yeah

293
00:11:44,640 --> 00:11:50,399
okay so i just need the ppc right

294
00:11:48,320 --> 00:11:52,160
right because every time i compute that

295
00:11:50,399 --> 00:11:54,240
one row i just need a previous row so

296
00:11:52,160 --> 00:11:56,639
why not just keep a record of the

297
00:11:54,240 --> 00:11:59,519
previous row right and we just can say

298
00:11:56,639 --> 00:12:01,120
we can improve the time space complexity

299
00:11:59,519 --> 00:12:03,680
from dp

300
00:12:01,120 --> 00:12:06,800
from what from oc times n right that's

301
00:12:03,680 --> 00:12:10,639
the times and space complexity into one

302
00:12:06,800 --> 00:12:10,639
the previous one the bottom up is what

303
00:12:14,420 --> 00:12:17,549
[Music]

304
00:12:20,480 --> 00:12:24,720
is the same because we still need to go

305
00:12:22,720 --> 00:12:27,440
through the procedure yeah we need to

306
00:12:24,720 --> 00:12:29,519
iterate there are an item there's no way

307
00:12:27,440 --> 00:12:31,440
that we can make a decision we can

308
00:12:29,519 --> 00:12:34,880
compute the maximum value without going

309
00:12:31,440 --> 00:12:36,639
through the night am i right yeah okay

310
00:12:34,880 --> 00:12:40,399
okay so uh

311
00:12:36,639 --> 00:12:43,040
so let me just write uh

312
00:12:40,399 --> 00:12:44,720
write a photo out dynamic programming

313
00:12:43,040 --> 00:12:45,200
with uh

314
00:12:44,720 --> 00:12:47,920
uh

315
00:12:45,200 --> 00:12:50,000
[Music]

316
00:12:47,920 --> 00:12:52,320
with what

317
00:12:50,000 --> 00:12:54,639
we said

318
00:12:52,320 --> 00:12:55,920
let me just try that out let me put me

319
00:12:54,639 --> 00:12:57,120
okay

320
00:12:55,920 --> 00:13:00,720
define

321
00:12:57,120 --> 00:13:00,720
that's the knapsack

322
00:13:01,519 --> 00:13:06,720
zero one and we have the values let's

323
00:13:04,160 --> 00:13:08,160
just call v we have the weight and we

324
00:13:06,720 --> 00:13:11,519
have a c okay

325
00:13:08,160 --> 00:13:13,200
v value w for weight and c for capacity

326
00:13:11,519 --> 00:13:15,839
okay so now

327
00:13:13,200 --> 00:13:17,200
we we have to do what we have to dp

328
00:13:15,839 --> 00:13:18,160
that's uh

329
00:13:17,200 --> 00:13:20,639
we have

330
00:13:18,160 --> 00:13:23,200
we need to find out the the length of

331
00:13:20,639 --> 00:13:25,440
the the number of items which is n and

332
00:13:23,200 --> 00:13:28,160
this length of the v or an ends of w it

333
00:13:25,440 --> 00:13:30,720
doesn't matter okay so now t p

334
00:13:28,160 --> 00:13:33,519
equals the first dimension okay the

335
00:13:30,720 --> 00:13:34,560
first dimension is what

336
00:13:33,519 --> 00:13:37,920
for

337
00:13:34,560 --> 00:13:40,959
underscore in range this is the second

338
00:13:37,920 --> 00:13:43,680
dimension which is c plus one right uh

339
00:13:40,959 --> 00:13:44,880
and then four underscore in

340
00:13:43,680 --> 00:13:48,399
range

341
00:13:44,880 --> 00:13:49,120
which is n right so look so the

342
00:13:48,399 --> 00:13:50,560
c

343
00:13:49,120 --> 00:13:53,440
column c

344
00:13:50,560 --> 00:13:55,040
and then n rows right okay and then we

345
00:13:53,440 --> 00:13:57,839
need to fill our first row right

346
00:13:55,040 --> 00:13:59,519
remember for i in

347
00:13:57,839 --> 00:14:02,399
range

348
00:13:59,519 --> 00:14:03,519
okay let's start from the c

349
00:14:02,399 --> 00:14:04,560
up to

350
00:14:03,519 --> 00:14:07,360
weights

351
00:14:04,560 --> 00:14:09,920
weighs zero minus one and i explained

352
00:14:07,360 --> 00:14:14,240
what what was here okay and then

353
00:14:09,920 --> 00:14:14,240
d p the first row zero

354
00:14:14,880 --> 00:14:19,279
yeah try to understand okay i'll explain

355
00:14:17,760 --> 00:14:22,240
all right i

356
00:14:19,279 --> 00:14:24,240
the first dimension is what is the item

357
00:14:22,240 --> 00:14:27,120
the second dimension is

358
00:14:24,240 --> 00:14:29,920
is the remaining so which is the value i

359
00:14:27,120 --> 00:14:31,760
okay so what what does this mean here

360
00:14:29,920 --> 00:14:33,120
remember this table yeah into memory

361
00:14:31,760 --> 00:14:35,279
stable i

362
00:14:33,120 --> 00:14:37,600
uh c

363
00:14:35,279 --> 00:14:39,440
okay we are trying to

364
00:14:37,600 --> 00:14:42,079
i equals yeah we're trying to fill the

365
00:14:39,440 --> 00:14:44,800
first row okay initially initially this

366
00:14:42,079 --> 00:14:46,800
is all zero and all the values zero but

367
00:14:44,800 --> 00:14:50,320
we are trying to

368
00:14:46,800 --> 00:14:53,120
feel the rows from c up to up to weight

369
00:14:50,320 --> 00:14:55,760
zero weight weight zero

370
00:14:53,120 --> 00:14:58,000
is the weight of the first item

371
00:14:55,760 --> 00:15:00,560
minus one is up to remember this is up

372
00:14:58,000 --> 00:15:03,600
to not including right so c

373
00:15:00,560 --> 00:15:06,800
from we we change i we iterate from i to

374
00:15:03,600 --> 00:15:08,959
from c to weight i because why is that

375
00:15:06,800 --> 00:15:11,680
the capacity is bigger than weight then

376
00:15:08,959 --> 00:15:13,839
we can get a value right yeah

377
00:15:11,680 --> 00:15:16,240
previously in the previous lesson i what

378
00:15:13,839 --> 00:15:19,360
did we talk about we just say okay from

379
00:15:16,240 --> 00:15:22,160
i equals we can iterate from this row

380
00:15:19,360 --> 00:15:24,399
right these values but we have to check

381
00:15:22,160 --> 00:15:26,880
if the remaining if the i is bigger than

382
00:15:24,399 --> 00:15:28,240
the weight if it's smaller than a way

383
00:15:26,880 --> 00:15:30,399
what happened

384
00:15:28,240 --> 00:15:32,240
if it look if we can

385
00:15:30,399 --> 00:15:34,560
yeah yeah exactly if the weight is too

386
00:15:32,240 --> 00:15:36,240
heavy to put if the first item is too

387
00:15:34,560 --> 00:15:38,160
heavy to put in the knapsack we can't

388
00:15:36,240 --> 00:15:40,800
pick it then the value will be zero

389
00:15:38,160 --> 00:15:42,959
right initially will be zero but if

390
00:15:40,800 --> 00:15:46,240
if the next step is big bigger than the

391
00:15:42,959 --> 00:15:48,240
weight right look c up to weight

392
00:15:46,240 --> 00:15:50,079
now we can took it and what value can we

393
00:15:48,240 --> 00:15:53,920
get

394
00:15:50,079 --> 00:15:55,600
v0 okay v0 the first first item right i

395
00:15:53,920 --> 00:15:58,240
know with this then we can go through

396
00:15:55,600 --> 00:15:59,440
the value yeah for i in

397
00:15:58,240 --> 00:16:01,920
range

398
00:15:59,440 --> 00:16:04,079
we can start filling the first row up to

399
00:16:01,920 --> 00:16:06,320
n minus lower and y

400
00:16:04,079 --> 00:16:08,639
one to n right and then we just go for

401
00:16:06,320 --> 00:16:10,320
this it doesn't matter if you're going

402
00:16:08,639 --> 00:16:13,040
from the left to the right or right to

403
00:16:10,320 --> 00:16:15,440
the left okay for j in

404
00:16:13,040 --> 00:16:16,399
range why is that because look

405
00:16:15,440 --> 00:16:18,560
one

406
00:16:16,399 --> 00:16:20,480
we already have the previous note so it

407
00:16:18,560 --> 00:16:22,480
doesn't matter we go from the left or

408
00:16:20,480 --> 00:16:25,040
that right to the left right because all

409
00:16:22,480 --> 00:16:26,880
the values we want

410
00:16:25,040 --> 00:16:28,880
is there right so

411
00:16:26,880 --> 00:16:30,240
it doesn't matter if i i calculate value

412
00:16:28,880 --> 00:16:31,040
from left to the right or right to the

413
00:16:30,240 --> 00:16:32,560
left

414
00:16:31,040 --> 00:16:34,079
right because the previous row is

415
00:16:32,560 --> 00:16:36,079
already ready right

416
00:16:34,079 --> 00:16:37,120
yeah so range let's say we can start

417
00:16:36,079 --> 00:16:40,320
from the

418
00:16:37,120 --> 00:16:42,800
zero to two capacity yeah c plus one and

419
00:16:40,320 --> 00:16:44,959
then we can do this dp

420
00:16:42,800 --> 00:16:48,240
i j like this is the function and equal

421
00:16:44,959 --> 00:16:50,639
as what it was the max

422
00:16:48,240 --> 00:16:52,560
uh maximum we put it on we don't put it

423
00:16:50,639 --> 00:16:56,079
we don't put it we don't think it would

424
00:16:52,560 --> 00:17:00,399
be i minus one j with the same capacity

425
00:16:56,079 --> 00:17:04,559
yeah if we put it it'll be i minus one

426
00:17:00,399 --> 00:17:06,400
j minus minus what the the weight weight

427
00:17:04,559 --> 00:17:08,240
the i right

428
00:17:06,400 --> 00:17:11,520
but when we put it we get the value we

429
00:17:08,240 --> 00:17:14,319
have v i right but obviously j needs to

430
00:17:11,520 --> 00:17:17,360
be bigger than w i so if j

431
00:17:14,319 --> 00:17:21,439
bigger or equal than w i

432
00:17:17,360 --> 00:17:22,240
dlr right yeah and we put these to check

433
00:17:21,439 --> 00:17:23,839
yeah

434
00:17:22,240 --> 00:17:25,600
all right let's start let me go with and

435
00:17:23,839 --> 00:17:27,760
then return

436
00:17:25,600 --> 00:17:30,400
within one dp

437
00:17:27,760 --> 00:17:33,600
n minus one capacity

438
00:17:30,400 --> 00:17:35,280
okay yeah yeah this is not new yeah yeah

439
00:17:33,600 --> 00:17:36,480
this is not new we have talking about

440
00:17:35,280 --> 00:17:38,000
that

441
00:17:36,480 --> 00:17:40,160
right yeah

442
00:17:38,000 --> 00:17:42,320
okay okay so now

443
00:17:40,160 --> 00:17:44,880
we we just say we want to compress yeah

444
00:17:42,320 --> 00:17:47,919
into least n times c we want to look

445
00:17:44,880 --> 00:17:49,840
this is this is enzyme c table yeah we

446
00:17:47,919 --> 00:17:52,320
just imagine we want to

447
00:17:49,840 --> 00:17:53,440
compress into one row

448
00:17:52,320 --> 00:17:55,600
yeah

449
00:17:53,440 --> 00:17:56,330
why can we compress

450
00:17:55,600 --> 00:17:57,520
because

451
00:17:56,330 --> 00:18:00,080
[Music]

452
00:17:57,520 --> 00:18:01,360
why can we compress what what why why

453
00:18:00,080 --> 00:18:03,760
can't we do it

454
00:18:01,360 --> 00:18:05,760
why can't we do it

455
00:18:03,760 --> 00:18:08,400
it's because

456
00:18:05,760 --> 00:18:10,080
when we access change when we calculate

457
00:18:08,400 --> 00:18:12,480
the value here we want we want to put

458
00:18:10,080 --> 00:18:14,880
the value here so what values do we need

459
00:18:12,480 --> 00:18:16,480
the higher rise yeah the previous low

460
00:18:14,880 --> 00:18:20,080
just the one do we need

461
00:18:16,480 --> 00:18:22,880
two rows of above no right we so we we

462
00:18:20,080 --> 00:18:25,120
at any time we we are feeling look we

463
00:18:22,880 --> 00:18:28,080
are starting freezing some low barrel

464
00:18:25,120 --> 00:18:32,160
yeah the first external loop is grow so

465
00:18:28,080 --> 00:18:34,320
we we starting to feeding the low rose

466
00:18:32,160 --> 00:18:35,600
from the bottom up yeah both up left to

467
00:18:34,320 --> 00:18:38,880
the right okay

468
00:18:35,600 --> 00:18:39,919
yeah yeah this here is purple right yes

469
00:18:38,880 --> 00:18:41,520
but

470
00:18:39,919 --> 00:18:42,480
it's quite

471
00:18:41,520 --> 00:18:46,000
yeah

472
00:18:42,480 --> 00:18:48,320
this is top this is the bottom

473
00:18:46,000 --> 00:18:51,120
do you understand yeah okay

474
00:18:48,320 --> 00:18:53,120
right dpi only needs the dpi minus one

475
00:18:51,120 --> 00:18:54,000
and dpi minus one right

476
00:18:53,120 --> 00:18:55,440
okay

477
00:18:54,000 --> 00:18:57,840
okay so now we want to be able to

478
00:18:55,440 --> 00:19:00,080
squeeze it squeeze it so here we don't

479
00:18:57,840 --> 00:19:02,559
need we don't need this

480
00:19:00,080 --> 00:19:04,559
we just say dp 0

481
00:19:02,559 --> 00:19:09,039
times

482
00:19:04,559 --> 00:19:12,799
tb 0 for underscore in range

483
00:19:09,039 --> 00:19:15,440
c plus one okay or you can say zero

484
00:19:12,799 --> 00:19:17,679
times c plus one okay this is the same

485
00:19:15,440 --> 00:19:20,240
okay two there are two ways of writing

486
00:19:17,679 --> 00:19:22,240
it okay yeah which way you think you

487
00:19:20,240 --> 00:19:24,799
it's easier to remember

488
00:19:22,240 --> 00:19:26,880
uh i think

489
00:19:24,799 --> 00:19:30,559
these are the same which one the bottom

490
00:19:26,880 --> 00:19:30,559
one looks kind of complicated

491
00:19:31,840 --> 00:19:35,600
okay but some people find this this one

492
00:19:33,600 --> 00:19:38,160
is quite easy to understand okay so i

493
00:19:35,600 --> 00:19:40,240
have an array of zero of zero and i want

494
00:19:38,160 --> 00:19:44,000
to times this z plus one times

495
00:19:40,240 --> 00:19:44,000
okay so let's that's a little bit okay

496
00:19:44,400 --> 00:19:47,919
okay

497
00:19:46,080 --> 00:19:49,600
okay yeah that's fine so

498
00:19:47,919 --> 00:19:52,160
again here

499
00:19:49,600 --> 00:19:54,640
we don't need our first dimension right

500
00:19:52,160 --> 00:19:56,480
right because we only have

501
00:19:54,640 --> 00:19:58,799
have one dimension so we'll be able to

502
00:19:56,480 --> 00:20:01,840
get get rid of the first dimension

503
00:19:58,799 --> 00:20:03,919
yeah this will be okay and now this will

504
00:20:01,840 --> 00:20:04,840
be okay and now here

505
00:20:03,919 --> 00:20:08,159
okay

506
00:20:04,840 --> 00:20:11,360
here this is a bit tricky so in order to

507
00:20:08,159 --> 00:20:12,640
compress the final uh space you have to

508
00:20:11,360 --> 00:20:16,159
we have to

509
00:20:12,640 --> 00:20:17,679
inversely enumerate from j from capacity

510
00:20:16,159 --> 00:20:19,360
up to

511
00:20:17,679 --> 00:20:21,120
so we have to

512
00:20:19,360 --> 00:20:22,559
go from the right to the left instead of

513
00:20:21,120 --> 00:20:24,799
left to the right

514
00:20:22,559 --> 00:20:27,520
why is that because if we going from

515
00:20:24,799 --> 00:20:30,640
left to right the smaller that dp

516
00:20:27,520 --> 00:20:31,679
smaller dp0 up to

517
00:20:30,640 --> 00:20:33,919
j

518
00:20:31,679 --> 00:20:35,120
yeah should be overwritten okay to be

519
00:20:33,919 --> 00:20:36,960
overwritten

520
00:20:35,120 --> 00:20:39,840
yeah so we have to go through from the

521
00:20:36,960 --> 00:20:41,360
right to that to make sure it's not over

522
00:20:39,840 --> 00:20:43,600
without okay what was it that you just

523
00:20:41,360 --> 00:20:45,840
say

524
00:20:43,600 --> 00:20:45,840
um

525
00:20:46,159 --> 00:20:51,120
so which way should we use

526
00:20:48,880 --> 00:20:51,120
these

527
00:20:53,360 --> 00:20:57,520
i know what i mean what you just said

528
00:20:55,280 --> 00:20:58,799
you missed what what did i say i was

529
00:20:57,520 --> 00:21:00,880
just saying that

530
00:20:58,799 --> 00:21:02,559
for j in range

531
00:21:00,880 --> 00:21:04,080
previously it doesn't matter it doesn't

532
00:21:02,559 --> 00:21:06,159
matter left to right or right to the

533
00:21:04,080 --> 00:21:08,960
left but now we only have one one

534
00:21:06,159 --> 00:21:12,640
dimensional so we need to

535
00:21:08,960 --> 00:21:15,360
we we need to emulate enumerate the j

536
00:21:12,640 --> 00:21:17,919
from the capacity from right to the left

537
00:21:15,360 --> 00:21:19,520
okay this is only what uh direction that

538
00:21:17,919 --> 00:21:21,360
it works okay

539
00:21:19,520 --> 00:21:24,240
why is that because if you iterate from

540
00:21:21,360 --> 00:21:26,240
left to right the tp with the smaller j

541
00:21:24,240 --> 00:21:29,919
that will be overwritten okay that's

542
00:21:26,240 --> 00:21:31,120
what i said so here i i just need to go

543
00:21:29,919 --> 00:21:33,520
from j

544
00:21:31,120 --> 00:21:37,039
well from the capacity up to

545
00:21:33,520 --> 00:21:38,320
the uh minus y minus one okay and then i

546
00:21:37,039 --> 00:21:41,360
need to go

547
00:21:38,320 --> 00:21:42,320
uh remove the first direction yeah tpj

548
00:21:41,360 --> 00:21:43,120
equals

549
00:21:42,320 --> 00:21:44,159
max

550
00:21:43,120 --> 00:21:45,600
j

551
00:21:44,159 --> 00:21:49,440
and then and

552
00:21:45,600 --> 00:21:53,039
erase the first dimension db j minus wi

553
00:21:49,440 --> 00:21:56,240
plus vi right if j look okay so look if

554
00:21:53,039 --> 00:21:59,520
j bigger than w i l is zero so i can i

555
00:21:56,240 --> 00:22:03,039
can also get rid of this but and then i

556
00:21:59,520 --> 00:22:04,080
change this c up to double

557
00:22:03,039 --> 00:22:07,360
i

558
00:22:04,080 --> 00:22:10,240
minus one right right so if i put it

559
00:22:07,360 --> 00:22:11,360
then i don't need this if check right

560
00:22:10,240 --> 00:22:13,840
make sense

561
00:22:11,360 --> 00:22:13,840
yeah

562
00:22:14,080 --> 00:22:18,960
alright yeah

563
00:22:15,679 --> 00:22:21,840
so previously look j from ranging from c

564
00:22:18,960 --> 00:22:24,400
up to zero right up to zero

565
00:22:21,840 --> 00:22:27,280
but you have to check if j is bigger or

566
00:22:24,400 --> 00:22:29,600
equal than w i if it's bigger or equal

567
00:22:27,280 --> 00:22:33,039
than it

568
00:22:29,600 --> 00:22:35,200
the cpj minus wi makes sense right plus

569
00:22:33,039 --> 00:22:36,240
w and this means that we are picking the

570
00:22:35,200 --> 00:22:38,559
i

571
00:22:36,240 --> 00:22:40,799
because this current remaining capacity

572
00:22:38,559 --> 00:22:43,039
is bigger than the way of current item

573
00:22:40,799 --> 00:22:44,320
then i can pick it i can pick it and

574
00:22:43,039 --> 00:22:46,799
then again

575
00:22:44,320 --> 00:22:49,440
i can get the value right

576
00:22:46,799 --> 00:22:51,520
only if j is bigger than w if j is

577
00:22:49,440 --> 00:22:54,400
smaller than w it means that this item

578
00:22:51,520 --> 00:22:57,200
is too big to put in in the back with j

579
00:22:54,400 --> 00:22:59,200
capacity then i should get a zero right

580
00:22:57,200 --> 00:23:02,240
yeah you get this part

581
00:22:59,200 --> 00:23:04,880
okay so now look because this j j is

582
00:23:02,240 --> 00:23:07,200
decrementing from c to zero at some

583
00:23:04,880 --> 00:23:10,559
point it will fall

584
00:23:07,200 --> 00:23:13,919
have 4 below wj so in this case i can

585
00:23:10,559 --> 00:23:17,520
just say okay let's stop at w

586
00:23:13,919 --> 00:23:20,320
i minus 1 which is up to

587
00:23:17,520 --> 00:23:24,480
yeah it will be stopping at w i and then

588
00:23:20,320 --> 00:23:27,520
i don't need this s zero okay

589
00:23:24,480 --> 00:23:30,240
the time complexity look o n times c is

590
00:23:27,520 --> 00:23:33,280
the same the space complexity

591
00:23:30,240 --> 00:23:35,120
oc right because we are compressing the

592
00:23:33,280 --> 00:23:37,520
space we instead of using two

593
00:23:35,120 --> 00:23:39,600
dimensional array we are only using one

594
00:23:37,520 --> 00:23:41,679
dimensional layer which has the c plus

595
00:23:39,600 --> 00:23:45,039
one elements right so the time compare

596
00:23:41,679 --> 00:23:48,159
the space complexity so c so

597
00:23:45,039 --> 00:23:49,440
about all these three um

598
00:23:48,159 --> 00:23:50,880
approaches

599
00:23:49,440 --> 00:23:52,720
dynamic programming which one do you

600
00:23:50,880 --> 00:23:54,960
think is the most efficient one in terms

601
00:23:52,720 --> 00:23:58,080
of time and space complexity

602
00:23:54,960 --> 00:24:00,240
the last question come on

603
00:23:58,080 --> 00:24:01,760
which one

604
00:24:00,240 --> 00:24:03,039
which one

605
00:24:01,760 --> 00:24:06,159
is this one

606
00:24:03,039 --> 00:24:07,200
uh-huh why is that

607
00:24:06,159 --> 00:24:09,679
alright

608
00:24:07,200 --> 00:24:09,679
why is that

609
00:24:09,840 --> 00:24:13,760
which one is the most efficient the

610
00:24:12,000 --> 00:24:16,320
first one top-down dynamic programming

611
00:24:13,760 --> 00:24:18,720
with the cash yeah cash

612
00:24:16,320 --> 00:24:20,799
it's easy to implement right but as i

613
00:24:18,720 --> 00:24:22,880
said before the location with some

614
00:24:20,799 --> 00:24:24,799
implementation might be a bit slow

615
00:24:22,880 --> 00:24:27,679
compared to the bottom up right the

616
00:24:24,799 --> 00:24:29,679
second approach button up we create this

617
00:24:27,679 --> 00:24:32,240
table and we try to fill the values go

618
00:24:29,679 --> 00:24:33,919
by row column by column right from the

619
00:24:32,240 --> 00:24:36,400
bottom

620
00:24:33,919 --> 00:24:38,799
first row second row zero and column one

621
00:24:36,400 --> 00:24:41,600
column zero from left to right okay and

622
00:24:38,799 --> 00:24:44,159
the third approach we are optimizing the

623
00:24:41,600 --> 00:24:46,720
space into one dimension so the space

624
00:24:44,159 --> 00:24:49,120
complexity is c the time complexity is

625
00:24:46,720 --> 00:24:52,799
always sometimes there so which one is

626
00:24:49,120 --> 00:24:52,799
the most efficient one

627
00:24:53,039 --> 00:24:56,799
which one

628
00:24:54,400 --> 00:24:59,600
normally which one you know this is the

629
00:24:56,799 --> 00:25:01,600
last series of the zero one next area

630
00:24:59,600 --> 00:25:03,919
because i spent three days including

631
00:25:01,600 --> 00:25:06,400
today to talk about this problem and

632
00:25:03,919 --> 00:25:10,000
there are three approaches so normally

633
00:25:06,400 --> 00:25:11,919
which approach comes the is the best the

634
00:25:10,000 --> 00:25:14,080
last one yeah usually i talk about

635
00:25:11,919 --> 00:25:16,080
optimization at least it's the most

636
00:25:14,080 --> 00:25:18,400
optimal one we're done with that okay

637
00:25:16,080 --> 00:25:20,960
access because because the time

638
00:25:18,400 --> 00:25:23,600
complexity for all three

639
00:25:20,960 --> 00:25:25,360
is the same oc times m although the

640
00:25:23,600 --> 00:25:26,559
first one top down dynamic programming

641
00:25:25,360 --> 00:25:28,559
is the cache

642
00:25:26,559 --> 00:25:31,039
might be practically speaking a little

643
00:25:28,559 --> 00:25:33,120
bit slow compared to butter up and the

644
00:25:31,039 --> 00:25:36,799
second approach and the third approach

645
00:25:33,120 --> 00:25:38,960
the same complexity yeah we just change

646
00:25:36,799 --> 00:25:41,600
so what what did i think just change

647
00:25:38,960 --> 00:25:43,840
look i just changed here right i changed

648
00:25:41,600 --> 00:25:46,240
this to optimize to one space and then i

649
00:25:43,840 --> 00:25:48,000
didn't change anything here right i i

650
00:25:46,240 --> 00:25:50,400
changed the second loop from left to

651
00:25:48,000 --> 00:25:52,480
right i changed it to right to the left

652
00:25:50,400 --> 00:25:53,840
and all this i just remove the first

653
00:25:52,480 --> 00:25:56,159
dimension right

654
00:25:53,840 --> 00:25:58,480
yeah no much change here right so the

655
00:25:56,159 --> 00:26:01,919
second approach the third approach

656
00:25:58,480 --> 00:26:03,600
is is use less space right with less

657
00:26:01,919 --> 00:26:05,760
space and

658
00:26:03,600 --> 00:26:07,840
and generally speaking is the the second

659
00:26:05,760 --> 00:26:10,640
and the third approach is equal

660
00:26:07,840 --> 00:26:10,640
equivalently

661
00:26:10,720 --> 00:26:14,640
performance yeah faster okay then the

662
00:26:13,360 --> 00:26:17,279
first one okay

663
00:26:14,640 --> 00:26:18,799
okay that's it for today yeah thank you

664
00:26:17,279 --> 00:26:20,720
bye bye

665
00:26:18,799 --> 00:26:22,720
bye bye are you are you still here are

666
00:26:20,720 --> 00:26:25,840
you still with me bye

667
00:26:22,720 --> 00:26:25,840
bye bye bye

