1
00:00:00,160 --> 00:00:05,839
hello hello hi mr mr ryan

2
00:00:03,840 --> 00:00:07,600
yeah we have been talking about this uh

3
00:00:05,839 --> 00:00:08,880
wordpress problem okay what's the

4
00:00:07,600 --> 00:00:10,080
question

5
00:00:08,880 --> 00:00:11,840
yesterday we talked about the

6
00:00:10,080 --> 00:00:13,599
preferences yeah

7
00:00:11,840 --> 00:00:14,960
breakfast which preferences rent

8
00:00:13,599 --> 00:00:17,920
research is

9
00:00:14,960 --> 00:00:17,920
bff

10
00:00:28,960 --> 00:00:33,600
yeah okay let's just quickly see how the

11
00:00:32,000 --> 00:00:35,680
preferences work okay so we're gonna

12
00:00:33,600 --> 00:00:36,960
collect it one two

13
00:00:35,680 --> 00:00:39,280
three

14
00:00:36,960 --> 00:00:40,559
four whoa five

15
00:00:39,280 --> 00:00:42,960
six

16
00:00:40,559 --> 00:00:44,399
seven okay so first of all we have a

17
00:00:42,960 --> 00:00:47,360
queue

18
00:00:44,399 --> 00:00:49,840
double ndq and double ldq and then at

19
00:00:47,360 --> 00:00:52,160
the beginning we put the one in

20
00:00:49,840 --> 00:00:54,399
yeah and then every time we take one

21
00:00:52,160 --> 00:00:56,399
item out of the queue or we take

22
00:00:54,399 --> 00:00:59,120
everything out of here

23
00:00:56,399 --> 00:01:02,160
we push it if you take one out the kit

24
00:00:59,120 --> 00:01:04,080
is 2 3 4 we incur it one by one

25
00:01:02,160 --> 00:01:05,280
okay so now that's the difference now we

26
00:01:04,080 --> 00:01:07,119
can take one

27
00:01:05,280 --> 00:01:08,799
or we can take everything out right if

28
00:01:07,119 --> 00:01:09,920
we take everything out then we can make

29
00:01:08,799 --> 00:01:12,240
sure that

30
00:01:09,920 --> 00:01:13,840
all the nouns in the queue belongs to

31
00:01:12,240 --> 00:01:15,600
some number okay if we take everything

32
00:01:13,840 --> 00:01:17,520
out two three four the key will be five

33
00:01:15,600 --> 00:01:19,600
six eight seven

34
00:01:17,520 --> 00:01:23,200
five six seven

35
00:01:19,600 --> 00:01:25,200
we are given a list of words and then

36
00:01:23,200 --> 00:01:28,320
also we are given a sentence a string

37
00:01:25,200 --> 00:01:30,079
and the task is to check if we be able

38
00:01:28,320 --> 00:01:32,479
to break the sentence we break the

39
00:01:30,079 --> 00:01:35,280
string using the words given and we can

40
00:01:32,479 --> 00:01:38,720
use as many times the words

41
00:01:35,280 --> 00:01:40,880
as possible okay does it make sense yeah

42
00:01:38,720 --> 00:01:42,960
can you leave some letters out

43
00:01:40,880 --> 00:01:45,680
no oh that's a very good question we

44
00:01:42,960 --> 00:01:47,360
need to complete the whole string right

45
00:01:45,680 --> 00:01:52,880
so for example like

46
00:01:47,360 --> 00:01:55,600
a b c d e if we have a e c b

47
00:01:52,880 --> 00:01:57,840
it's not possible to complete the string

48
00:01:55,600 --> 00:02:00,159
because a we have a we have b we have c

49
00:01:57,840 --> 00:02:01,680
we we have c d but we don't have e so we

50
00:02:00,159 --> 00:02:04,719
can't jump to the end

51
00:02:01,680 --> 00:02:05,840
so how about a

52
00:02:04,719 --> 00:02:07,439
b

53
00:02:05,840 --> 00:02:11,039
c d

54
00:02:07,439 --> 00:02:13,920
uh and then if if if we have another p

55
00:02:11,039 --> 00:02:14,800
here right if a b c d b

56
00:02:13,920 --> 00:02:15,680
b

57
00:02:14,800 --> 00:02:18,800
e

58
00:02:15,680 --> 00:02:20,560
and we have uh we have e as well so then

59
00:02:18,800 --> 00:02:24,640
that's okay a b

60
00:02:20,560 --> 00:02:26,959
c d d p yeah we can use the p as many

61
00:02:24,640 --> 00:02:28,400
times as you want okay yesterday we

62
00:02:26,959 --> 00:02:30,319
talked about breakfast search the day

63
00:02:28,400 --> 00:02:32,000
before yes they will talk about deficit

64
00:02:30,319 --> 00:02:34,000
who is the

65
00:02:32,000 --> 00:02:36,560
minimum migration cash yeah with the

66
00:02:34,000 --> 00:02:39,200
breakfast search we still need to use

67
00:02:36,560 --> 00:02:41,360
the hash table to remember

68
00:02:39,200 --> 00:02:43,440
the path we remember the spread points

69
00:02:41,360 --> 00:02:45,440
we have visited right otherwise the time

70
00:02:43,440 --> 00:02:48,239
complexity will be exponential because

71
00:02:45,440 --> 00:02:51,040
there may be some intermediate uh notes

72
00:02:48,239 --> 00:02:53,440
that have been explored that will be

73
00:02:51,040 --> 00:02:54,959
explored many many times so we don't

74
00:02:53,440 --> 00:02:56,560
want to do that

75
00:02:54,959 --> 00:02:57,920
so today we're going to talk about the

76
00:02:56,560 --> 00:03:00,000
bottom up

77
00:02:57,920 --> 00:03:02,319
dynamic and then

78
00:03:00,000 --> 00:03:05,599
now top down is that recursion with

79
00:03:02,319 --> 00:03:08,480
minimization remember we use the dfsi

80
00:03:05,599 --> 00:03:09,599
gfsi this is a function defined and we

81
00:03:08,480 --> 00:03:12,480
put a cache

82
00:03:09,599 --> 00:03:13,840
so dfsi i is the index

83
00:03:12,480 --> 00:03:16,319
noting that

84
00:03:13,840 --> 00:03:18,879
at which position we are currently

85
00:03:16,319 --> 00:03:21,200
splitting right okay

86
00:03:18,879 --> 00:03:22,560
so it means that we if we are at

87
00:03:21,200 --> 00:03:25,680
index i

88
00:03:22,560 --> 00:03:27,200
if we can jump from index i to the end

89
00:03:25,680 --> 00:03:29,360
that's basically what it means that we

90
00:03:27,200 --> 00:03:31,040
put a cache just means that

91
00:03:29,360 --> 00:03:33,360
you know we were stalling we are

92
00:03:31,040 --> 00:03:35,440
remembering the intermediate result but

93
00:03:33,360 --> 00:03:37,519
for the bottom of dynamic programming

94
00:03:35,440 --> 00:03:40,640
it's the opposite way

95
00:03:37,519 --> 00:03:43,840
so let's say if we have a dpi

96
00:03:40,640 --> 00:03:47,200
an array means that if we will be able

97
00:03:43,840 --> 00:03:49,920
to construct a substring from zero index

98
00:03:47,200 --> 00:03:53,200
to i yeah so basically if we can

99
00:03:49,920 --> 00:03:55,840
construct a substring from zero up to

100
00:03:53,200 --> 00:04:01,599
i not including now what place what it

101
00:03:55,840 --> 00:04:02,560
means for example a b c d e if dp

102
00:04:01,599 --> 00:04:05,840
3

103
00:04:02,560 --> 00:04:07,120
what does it mean it means that 0 1 2 3

104
00:04:05,840 --> 00:04:10,000
if we can

105
00:04:07,120 --> 00:04:14,000
construct a string up to abc

106
00:04:10,000 --> 00:04:16,320
from start to abc if dp 3 equals true if

107
00:04:14,000 --> 00:04:19,919
there's a d in addition if i'm telling

108
00:04:16,320 --> 00:04:22,639
you we can jump from star to abc here

109
00:04:19,919 --> 00:04:25,759
right we can construct it as substring

110
00:04:22,639 --> 00:04:28,880
abc and if there's a d e in the string

111
00:04:25,759 --> 00:04:33,280
so can you tell me if e p

112
00:04:28,880 --> 00:04:36,000
dp 0 1 2 3 4 5 if dp is true or false

113
00:04:33,280 --> 00:04:38,720
what i'm telling you dp3 means that if

114
00:04:36,000 --> 00:04:40,720
we can jump to c including c this

115
00:04:38,720 --> 00:04:42,960
position abc okay you don't need to

116
00:04:40,720 --> 00:04:44,000
worry about you know how we are getting

117
00:04:42,960 --> 00:04:46,479
here but

118
00:04:44,000 --> 00:04:49,040
the thing is that i'm telling you that

119
00:04:46,479 --> 00:04:52,160
we can jump to c at this position also

120
00:04:49,040 --> 00:04:54,560
i'm telling you d e is in uh dictionary

121
00:04:52,160 --> 00:04:57,840
so can you tell me dp5

122
00:04:54,560 --> 00:04:59,600
can we jump to e here dp3

123
00:04:57,840 --> 00:05:01,120
means that we can

124
00:04:59,600 --> 00:05:03,039
jump to

125
00:05:01,120 --> 00:05:06,080
c position zero one two three not

126
00:05:03,039 --> 00:05:08,160
including d abc okay true and i'm

127
00:05:06,080 --> 00:05:09,919
telling you d e is in the dictionary so

128
00:05:08,160 --> 00:05:13,759
can you tell me if we i'll be able to

129
00:05:09,919 --> 00:05:15,280
jump to a b c b e here yeah yeah yeah

130
00:05:13,759 --> 00:05:16,960
obviously look you don't have we don't

131
00:05:15,280 --> 00:05:20,560
have to worry about how we're getting

132
00:05:16,960 --> 00:05:23,199
here i'm i'm telling you i i know

133
00:05:20,560 --> 00:05:25,520
we can get to this point here there's a

134
00:05:23,199 --> 00:05:27,440
d in the dictionary so obviously we can

135
00:05:25,520 --> 00:05:29,840
just connect these two pieces

136
00:05:27,440 --> 00:05:32,479
yeah let's directly program it okay so

137
00:05:29,840 --> 00:05:33,360
ppi means that if we'll be able to jump

138
00:05:32,479 --> 00:05:36,639
to

139
00:05:33,360 --> 00:05:39,600
s i right we need to set it to true if

140
00:05:36,639 --> 00:05:40,400
we find what if we find dp

141
00:05:39,600 --> 00:05:41,680
j

142
00:05:40,400 --> 00:05:45,280
is true

143
00:05:41,680 --> 00:05:50,960
and also s from j

144
00:05:45,280 --> 00:05:53,280
to i in w we can update the dpi right

145
00:05:50,960 --> 00:05:56,080
make sense yeah

146
00:05:53,280 --> 00:05:58,479
so this is the opposite for the d f s i

147
00:05:56,080 --> 00:06:00,560
it means that if we can jump

148
00:05:58,479 --> 00:06:03,759
if we can construct a substring from i

149
00:06:00,560 --> 00:06:05,600
to the end right at least this dpi means

150
00:06:03,759 --> 00:06:08,639
if we can construct a substring from the

151
00:06:05,600 --> 00:06:11,199
beginning to i not including i okay

152
00:06:08,639 --> 00:06:13,600
yeah this is opposite i basically doctor

153
00:06:11,199 --> 00:06:16,960
and button out a reverse direction right

154
00:06:13,600 --> 00:06:16,960
remember fibonacci number

155
00:06:17,199 --> 00:06:20,960
one

156
00:06:18,479 --> 00:06:20,960
zero

157
00:06:24,800 --> 00:06:30,080
so f n equals f n minus one plus f and

158
00:06:28,639 --> 00:06:32,240
minus one two y

159
00:06:30,080 --> 00:06:34,160
yeah if we using the recursion the

160
00:06:32,240 --> 00:06:35,759
question with the minimization from top

161
00:06:34,160 --> 00:06:38,720
to the bottom let's talk about dynamic

162
00:06:35,759 --> 00:06:40,319
programming but if we calculate f0 f1

163
00:06:38,720 --> 00:06:41,440
and based on the first two values we

164
00:06:40,319 --> 00:06:44,479
calculate

165
00:06:41,440 --> 00:06:46,720
f2 f3 right f2 s3 exactly let's put it

166
00:06:44,479 --> 00:06:49,280
up right so this is the same we are

167
00:06:46,720 --> 00:06:51,520
storing the dp values in an array

168
00:06:49,280 --> 00:06:53,520
instead of using the cache

169
00:06:51,520 --> 00:06:55,680
okay that's the main difference between

170
00:06:53,520 --> 00:06:57,599
bottom up dynamic programming and

171
00:06:55,680 --> 00:06:59,280
top-down and minimum programming okay

172
00:06:57,599 --> 00:07:00,800
sometimes called recursion with

173
00:06:59,280 --> 00:07:03,280
mobilization

174
00:07:00,800 --> 00:07:04,960
so if you want to explain dynamic

175
00:07:03,280 --> 00:07:07,680
programming concept to mommy what would

176
00:07:04,960 --> 00:07:10,000
you like to do it needs cash

177
00:07:07,680 --> 00:07:13,280
now i mean how would you explain this to

178
00:07:10,000 --> 00:07:16,080
someone who has not got the programming

179
00:07:13,280 --> 00:07:19,199
knowledge what is dynamic programming

180
00:07:16,080 --> 00:07:20,400
dynamic programming is minimalization

181
00:07:19,199 --> 00:07:23,599
thing

182
00:07:20,400 --> 00:07:26,160
yeah remember the intermediary design

183
00:07:23,599 --> 00:07:28,720
so for example if i give you five

184
00:07:26,160 --> 00:07:30,240
chocolates and like 10 minutes later i

185
00:07:28,720 --> 00:07:32,479
give you another chocolate how many

186
00:07:30,240 --> 00:07:34,000
chocolate will you get i give you five

187
00:07:32,479 --> 00:07:36,160
and then i'll give you one later what

188
00:07:34,000 --> 00:07:39,680
how many cigarettes

189
00:07:36,160 --> 00:07:41,680
six yeah easy why is that because

190
00:07:39,680 --> 00:07:43,680
one exactly that's very simple so you

191
00:07:41,680 --> 00:07:44,960
don't actually count how many in your

192
00:07:43,680 --> 00:07:46,879
hands right

193
00:07:44,960 --> 00:07:48,639
you're not counting okay i got one two

194
00:07:46,879 --> 00:07:50,800
three four five six

195
00:07:48,639 --> 00:07:52,080
because you already know you have five

196
00:07:50,800 --> 00:07:54,639
in your hand

197
00:07:52,080 --> 00:07:56,160
and one more coming so how many together

198
00:07:54,639 --> 00:07:57,599
five plus one

199
00:07:56,160 --> 00:08:00,240
make sense

200
00:07:57,599 --> 00:08:02,319
yeah that's the spirit of dynamic

201
00:08:00,240 --> 00:08:04,720
programming storing the intermediate

202
00:08:02,319 --> 00:08:06,560
results so we don't need to compute over

203
00:08:04,720 --> 00:08:08,639
and over again okay we are reusing the

204
00:08:06,560 --> 00:08:10,400
intermediate results okay

205
00:08:08,639 --> 00:08:12,879
work great okay let's come in back to

206
00:08:10,400 --> 00:08:14,080
this work break

207
00:08:12,879 --> 00:08:16,160
the

208
00:08:14,080 --> 00:08:17,840
words

209
00:08:16,160 --> 00:08:20,319
i know we're gonna string first of all

210
00:08:17,840 --> 00:08:22,160
we need to convert a list of words into

211
00:08:20,319 --> 00:08:24,639
a set why is it better if we're

212
00:08:22,160 --> 00:08:27,120
converting a list of words into a

213
00:08:24,639 --> 00:08:27,120
sentence

214
00:08:30,240 --> 00:08:34,880
and n will be the length of the word

215
00:08:33,360 --> 00:08:37,279
the list

216
00:08:34,880 --> 00:08:38,959
and then dp equals at the beginning we

217
00:08:37,279 --> 00:08:41,360
set it to force

218
00:08:38,959 --> 00:08:42,880
times n plus one

219
00:08:41,360 --> 00:08:45,040
yeah

220
00:08:42,880 --> 00:08:46,560
v p zero at the beginning we set it to

221
00:08:45,040 --> 00:08:50,240
true

222
00:08:46,560 --> 00:08:54,480
when we talk about dpi the i this is the

223
00:08:50,240 --> 00:08:57,360
one index beyond previous one so ep 3

224
00:08:54,480 --> 00:09:02,959
means that s 1

225
00:08:57,360 --> 00:09:02,959
s s 0 s 1 s 2 not including three okay

226
00:09:03,120 --> 00:09:07,680
so t p 0 the at beginning we set it to

227
00:09:05,680 --> 00:09:10,320
true yeah because if we're given nothing

228
00:09:07,680 --> 00:09:14,240
we already make it yeah we'll already be

229
00:09:10,320 --> 00:09:15,680
able to split nothing okay and then for

230
00:09:14,240 --> 00:09:16,399
i in

231
00:09:15,680 --> 00:09:19,600
we

232
00:09:16,399 --> 00:09:20,480
we iterate the split point

233
00:09:19,600 --> 00:09:23,760
yeah

234
00:09:20,480 --> 00:09:24,800
and then for j

235
00:09:23,760 --> 00:09:27,519
in

236
00:09:24,800 --> 00:09:27,519
range i

237
00:09:28,560 --> 00:09:35,519
if look if dp j okay if we if we be able

238
00:09:33,200 --> 00:09:37,040
to go to dpj

239
00:09:35,519 --> 00:09:38,320
right and then

240
00:09:37,040 --> 00:09:39,920
also

241
00:09:38,320 --> 00:09:42,240
s

242
00:09:39,920 --> 00:09:45,200
j up to i

243
00:09:42,240 --> 00:09:48,399
after i is in w in in the in the list

244
00:09:45,200 --> 00:09:51,200
right so look a what we given this

245
00:09:48,399 --> 00:09:52,920
example before abc will be able to get

246
00:09:51,200 --> 00:09:54,880
to abc as

247
00:09:52,920 --> 00:09:57,200
dp3 here

248
00:09:54,880 --> 00:10:00,640
but now i'm telling you d is in the

249
00:09:57,200 --> 00:10:03,279
dictionary right so d is in addition so

250
00:10:00,640 --> 00:10:04,160
that means that dp i we can set it to

251
00:10:03,279 --> 00:10:06,000
true

252
00:10:04,160 --> 00:10:07,680
i know we can

253
00:10:06,000 --> 00:10:09,440
once we set it to true we don't need to

254
00:10:07,680 --> 00:10:11,600
continue in the current loop

255
00:10:09,440 --> 00:10:14,399
this is the series of the dynamic

256
00:10:11,600 --> 00:10:15,600
programming i'm telling you that

257
00:10:14,399 --> 00:10:18,959
somehow

258
00:10:15,600 --> 00:10:21,600
we have constructed the substring abc

259
00:10:18,959 --> 00:10:24,480
right because bp3 is true and now i'm

260
00:10:21,600 --> 00:10:26,720
telling you that d e is in a dictionary

261
00:10:24,480 --> 00:10:28,640
b is in the position so it means that we

262
00:10:26,720 --> 00:10:31,120
can construct a string substitution

263
00:10:28,640 --> 00:10:33,040
abcde right

264
00:10:31,120 --> 00:10:35,279
the last one we just have to check we

265
00:10:33,040 --> 00:10:37,839
can dp

266
00:10:35,279 --> 00:10:40,560
n or dp minus one the last one right if

267
00:10:37,839 --> 00:10:43,040
we can if we can jump if we can

268
00:10:40,560 --> 00:10:43,760
construct the substring as

269
00:10:43,040 --> 00:10:46,240
n

270
00:10:43,760 --> 00:10:47,360
right if we can construct the substring

271
00:10:46,240 --> 00:10:49,600
as n

272
00:10:47,360 --> 00:10:52,320
this is the same thing can we analyze

273
00:10:49,600 --> 00:10:54,000
the time complexity here look one loop

274
00:10:52,320 --> 00:10:57,920
one loop one four

275
00:10:54,000 --> 00:11:01,040
one four o n o n n times n n square but

276
00:10:57,920 --> 00:11:03,440
here substring o n so time complexity

277
00:11:01,040 --> 00:11:05,920
will be o n times o n times o n is o and

278
00:11:03,440 --> 00:11:07,519
cubit let's space complexity we are

279
00:11:05,920 --> 00:11:10,000
allocating a space

280
00:11:07,519 --> 00:11:11,200
so the space complexity is always so the

281
00:11:10,000 --> 00:11:15,079
last question what have you learned

282
00:11:11,200 --> 00:11:15,079
today so far come on

283
00:11:16,240 --> 00:11:21,279
what have you learned so far come on can

284
00:11:17,920 --> 00:11:23,200
you tell me what have you learned about

285
00:11:21,279 --> 00:11:25,040
can you explain what's the problem

286
00:11:23,200 --> 00:11:27,360
programming

287
00:11:25,040 --> 00:11:30,160
can you just say a little bit more try a

288
00:11:27,360 --> 00:11:32,480
little bit more not just uh saying a few

289
00:11:30,160 --> 00:11:34,959
sense he was okay please come on

290
00:11:32,480 --> 00:11:38,160
okay we learned about that

291
00:11:34,959 --> 00:11:40,560
what's the problem and how we stop it

292
00:11:38,160 --> 00:11:43,839
the same as yesterday

293
00:11:40,560 --> 00:11:43,839
what's the problem

294
00:11:51,410 --> 00:11:56,000
[Music]

295
00:11:53,360 --> 00:11:58,399
yeah you can use it more than twice and

296
00:11:56,000 --> 00:12:02,160
no letters can be

297
00:11:58,399 --> 00:12:03,760
left out in the big string okay yeah

298
00:12:02,160 --> 00:12:06,480
that's good and

299
00:12:03,760 --> 00:12:08,079
each letter in the string could only be

300
00:12:06,480 --> 00:12:09,680
used once

301
00:12:08,079 --> 00:12:10,720
no uh

302
00:12:09,680 --> 00:12:12,959
no

303
00:12:10,720 --> 00:12:14,720
the string in the list we can use as

304
00:12:12,959 --> 00:12:15,440
many times as you want we don't need to

305
00:12:14,720 --> 00:12:16,959
use

306
00:12:15,440 --> 00:12:19,040
those ones

307
00:12:16,959 --> 00:12:20,399
there's no limit on how many times we

308
00:12:19,040 --> 00:12:24,720
can use it

309
00:12:20,399 --> 00:12:24,720
i mean like that one eric and

310
00:12:27,600 --> 00:12:31,440
okay okay

311
00:12:29,200 --> 00:12:33,040
so what's how are we uh implementing

312
00:12:31,440 --> 00:12:34,320
these today

313
00:12:33,040 --> 00:12:37,200
we're using

314
00:12:34,320 --> 00:12:39,120
dynamic programming

315
00:12:37,200 --> 00:12:42,560
yeah and how is that different from top

316
00:12:39,120 --> 00:12:42,560
down and first search

317
00:12:43,279 --> 00:12:48,800
eating cash yeah and we have to remember

318
00:12:46,800 --> 00:12:49,450
the thing yeah okay so what are you

319
00:12:48,800 --> 00:12:52,529
doing

320
00:12:49,450 --> 00:12:52,529
[Music]

321
00:12:55,120 --> 00:12:58,399
so how many ways can we solve this

322
00:12:56,639 --> 00:12:59,279
problem how many ways can we solve this

323
00:12:58,399 --> 00:13:00,480
problem

324
00:12:59,279 --> 00:13:02,480
two

325
00:13:00,480 --> 00:13:04,639
two no four

326
00:13:02,480 --> 00:13:06,320
why is it for how many how many ways can

327
00:13:04,639 --> 00:13:08,480
we uh what kind of argument have we

328
00:13:06,320 --> 00:13:09,519
learned in the past three days can we

329
00:13:08,480 --> 00:13:11,920
solve this

330
00:13:09,519 --> 00:13:11,920
process

331
00:13:13,680 --> 00:13:17,200
and what and what's today what's not

332
00:13:16,160 --> 00:13:19,440
dynamic

333
00:13:17,200 --> 00:13:19,440
okay

334
00:13:19,519 --> 00:13:25,079
okay that's it for today bye-bye and

335
00:13:21,360 --> 00:13:25,079
proof of yeah

